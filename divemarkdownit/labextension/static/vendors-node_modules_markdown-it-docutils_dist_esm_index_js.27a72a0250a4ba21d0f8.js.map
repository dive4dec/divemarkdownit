{"version":3,"file":"vendors-node_modules_markdown-it-docutils_dist_esm_index_js.27a72a0250a4ba21d0f8.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAoD;AACjB;AACnC;AACA;AACA;AACA;AACA,6BAA6B,4CAAS;AACtC;AACA;AACA;AACA;AACA;AACA,mBAAmB,kDAAY;AAC/B;AACA,kBAAkB,+CAAS;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,kFAAkF,aAAa;AAC/F;AACA;AACA;AACA,2EAA2E,aAAa;AACxF;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACpJmC;AAC8D;AACjG;AACA;AACA;AACA;AACA;AACO,mBAAmB,4CAAS;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,kDAAY;AACxC;AACA,mBAAmB,0CAAI;AACvB,kBAAkB,+CAAS;AAC3B,mBAAmB,kDAAY;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACO,wBAAwB,4CAAS;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,0CAAI;AACzB;AACA,4BAA4B,yCAAG;AAC/B;AACA;AACA;AACA,oBAAoB,kDAAY;AAChC;AACA,+BAA+B,wDAAkB;AACjD,qBAAqB,wDAAkB;AACvC;AACA,mBAAmB,0CAAI;AACvB,kBAAkB,+CAAS;AAC3B,mBAAmB,kDAAY;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACO,uBAAuB,4CAAS;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACrGuD;AACpB;AACoK;AACvM;AACA,SAAS,+CAAS;AAClB,YAAY,wDAAkB;AAC9B,WAAW,sEAAgC;AAC3C;AACA,WAAW,gDAAU;AACrB;AACA,YAAY,wDAAkB;AAC9B,WAAW,kDAAY;AACvB;AACA,UAAU,+CAAS;AACnB;AACA;AACA;AACA;AACA;AACO,oBAAoB,4CAAS;AACpC;AACA;AACA;AACA;AACA;AACA,yDAAyD,yBAAyB,OAAO,uDAAa,0DAA0D;AAChK;AACA;AACA;AACA,oBAAoB,6CAAG;AACvB,4DAA4D,4BAA4B;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,mBAAmB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,yDAAyD,yBAAyB,OAAO,uDAAa,yCAAyC,6EAAuC,YAAY,kDAAY,EAAE;AAChN;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,iDAAiD,mBAAmB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,uDAAS,wBAAwB,2DAAiB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,iDAAiD,cAAc;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,4EAA4E,aAAa;AACzF;AACA;AACA;AACO;AACP;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpImC;AACmB;AACN;AACE;AACN;AACd;AACI;AACA;AACJ;AACc;AACd;AACI;AACA;AACJ;AACvB,kGAAkG,EAAE,qDAAW,GAAG,2CAAM,GAAG,uCAAI,GAAG,2CAAM,GAAG,uCAAI;AACtJ;;;;;;;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AAC2B;AAC0B;AACrD;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAe;AAC9B;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe;AACf;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oDAAS;AACpC;AACA;AACA;AACA;AACA,6DAA6D,OAAO;AACpE;AACA;AACA;AACA,qEAAqE,MAAM;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,KAAK;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,sBAAsB;AACjE;AACA;AACA,+EAA+E,KAAK,GAAG,SAAS,MAAM,KAAK,MAAM;AACjH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,6BAA6B,wBAAwB,aAAa;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,WAAW,uBAAuB,aAAa;AACtG;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC1QuD;AACpB;AACG;AACtC;AACA;AACO,mBAAmB,4CAAS;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+CAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,2BAA2B,uDAAS,oBAAoB,6DAAmB;AAC3E,uCAAuC,cAAc;AACrD;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACO;AACP;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,8DAA8D,MAAM;AACpE;AACA;AACA;AACA;AACO;AACP,cAAc,YAAY;AAC1B;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,4CAA4C,SAAS;AACrD;AACA;AACA;AACA;AACO;AACP;AACA;AACA,4CAA4C,SAAS;AACrD;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP,eAAe,YAAY;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,gBAAgB;AAChF;AACA;AACA,2FAA2F,gBAAgB;AAC3G;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,iDAAiD,kBAAkB;AACnE;AACA;AACA;AACO;AACP;AACA;AACA;AACA;;;;;;;;;;;;;;;AC5IgE;AACjD;AACf;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF;AACvF;AACA;AACA;AACA,qEAAqE,WAAW,gBAAgB,eAAe,yBAAyB,cAAc;AACtJ;AACA;AACA;AACA;AACA;AACA,gCAAgC,cAAc;AAC9C;AACA,iEAAiE,WAAW,gBAAgB,eAAe,yBAAyB,sBAAsB,KAAK,yBAAyB,IAAI,QAAQ;AACpM;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,MAAM,KAAK;AAC1D;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,iDAAe;AAChD,4CAA4C,4DAAqB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,iBAAiB;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACvF+C;AACW;AAC4D;AAC/G,wBAAwB,4CAAS;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qDAAe;AAC1C,4BAA4B,qDAAe;AAC3C,mBAAmB,sEAAgC;AACnD,oBAAoB,+CAAS;AAC7B,mBAAmB,kDAAY;AAC/B,kBAAkB,+CAAS;AAC3B,mBAAmB,uDAAa;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,wDAAqB;AAC3C;AACA;AACA;AACA;AACA,uEAAuE,mBAAmB;AAC1F;AACA,iDAAiD,mBAAmB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,qEAAqE,UAAU;AAC/E;AACA;AACA;AACA,qEAAqE,UAAU;AAC/E;AACA;AACA;AACA;AACA,gCAAgC,uDAAc;AAC9C;AACA,iEAAiE,WAAW,2BAA2B,WAAW;AAClH,8GAA8G,WAAW;AACzH;AACA;AACA;AACA;AACA;AACA,mEAAmE,WAAW;AAC9E;AACA;AACA,2EAA2E,UAAU;AACrF,yEAAyE,UAAU;AACnF;AACA;AACA,+DAA+D,0BAA0B;AACzF;AACA,gDAAgD,QAAQ,sBAAsB,2BAA2B;AACzG;AACA;AACA,gDAAgD,QAAQ,wBAAwB,UAAU;AAC1F;AACA,iEAAiE,UAAU;AAC3E;AACA;AACA,kDAAkD,UAAU,8BAA8B,WAAW;AACrG;AACA;AACA;AACA,uEAAuE,UAAU;AACjF;AACA;AACA,uEAAuE,UAAU;AACjF;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AC1GyD;AACsC;AACtD;AACC;AACiC;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAAiB;AACjC,WAAW,gDAAY;AACvB;AACA;AACA;AACA;AACO;AACP,sDAAsD;AACtD,WAAW,8CAAU;AACrB,WAAW,wDAAe;AAC1B,WAAW,qDAAW;AACtB;AACA;AACA;AACA,iEAAe,cAAc,EAAC;AAC9B;;;;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC1C8B;AACvB,wBAAwB,uCAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,0BAA0B,uCAAI;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AACrC,2BAA2B,uCAAI;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AClDoC;AACa;AACnB;AACA;AACY;AACZ;AACA;AACA;AACY;AACnC,+EAA+E,EAAE,uCAAI,GAAG,uCAAI,GAAG,uCAAI,GAAG,mDAAU;AACvH;;;;;;;;;;;;;;;;ACVA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;;;;;;;;;;;;;;;;;ACvB8B;AAC9B;AACO,mBAAmB,uCAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,oBAAoB;AAC7D,+BAA+B,uBAAuB,IAAI,KAAK;AAC/D;AACA;AACO;AACP;AACA;AACA;;;;;;;;;;;;;;;AC7BA;AACA;AACA;AAC4C;AAC7B;AACf;AACA;AACA;AACA,iGAAiG;AACjG;AACA;AACA;AACA,qDAAqD,gBAAgB,eAAe,cAAc;AAClG;AACA;AACA,IAAI,yDAAkB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA,iCAAiC,KAAK;AACtC,0CAA0C,KAAK;AAC/C;AACA;AACA,yBAAyB,gBAAgB,KAAK,IAAI;AAClD;AACA;AACA;AACA;AACA,aAAa,eAAe,KAAK,GAAG;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACpG6D;AAC/B;AAC9B,yCAAyC;AAClC,iBAAiB,uCAAI;AAC5B;AACA;AACA;AACA;AACA,QAAQ,6DAAe,eAAe,sBAAsB,IAAI,iCAAiC;AACjG,kBAAkB,6DAAmB;AACrC;AACA,2BAA2B,cAAc;AACzC;AACA,SAAS;AACT;AACA;AACA;AACO,qBAAqB,uCAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6DAAe,eAAe,sBAAsB,IAAI,iEAAiE;AACjI;AACA;AACA;AACA;AACA;AACA,gCAAgC,QAAQ;AACxC;AACA,SAAS;AACT;AACA;AACA;AACO,kBAAkB,uCAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6DAAe,eAAe,sBAAsB,IAAI,8DAA8D;AAC9H;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC1DsC;AACtC;AACA;AACA,oBAAoB,mDAAW;AAC/B;AACA,oBAAoB,mCAAmC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,MAAM;AACtC,iBAAiB;AACjB;AACA,8CAA8C,MAAM,yBAAyB,SAAS;AACtF;AACA,4CAA4C,aAAa;AACzD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe;AACf;AACA;AACA;;;;;;;;;;;;;;;;;;ACrDA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;AACjC;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY,aAAa,aAAa;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,2BAA2B;AACnE;AACA;;;;;;;;;;;;;;AC/FA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,iBAAigDAAgD,gBAAgB;AAChE;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;;AAEA,kBAAkB,eAAe;AACjC;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,cAAc,0BAA0B;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,cAAc,yBAAyB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,gCAAgC;AAChC;AACA;AACA,iEAAiE;AACjE,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;AAMA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;;;AAGA;AACA;AACA,kBAAkB;AAClB,oBAAoB;AACpB,mBAAmB;AACnB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA,6CAA6C,gBAAgB;AAC7D;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,IAAI;AACJ;AACA;;AAEA,IAAI;AACJ,uBAAuB,kEAAkE;AACzF;AACA;;AAEA,IAAI;AACJ;AACA,iCAAiC,kCAAkC;AACnE;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA,+BAA+B;AAC/B,CAAC;;AAED;AACA;AACA,+BAA+B;AAC/B,CAAC;;AAED;AACA;AACA,+BAA+B;AAC/B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,gBAAgB;AAC7C,6BAA6B,gBAAgB;AAC7C,6BAA6B,gBAAgB;AAC7C,6BAA6B,gBAAgB;AAC7C,6BAA6B;AAC7B,GAAG;AACH;AACA,CAAC;;AAED;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,mCAAmC;AACtE,mCAAmC,mCAAmC;AACtE,mCAAmC;AACnC,GAAG;AACH;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,aAAa,aAAa;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA,aAAa,aAAa;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA,aAAa,aAAa;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,SAAS,aAAa;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,8EAA8E;AAChH,kCAAkC,gFAAgF;AAClH,kCAAkC,0BAA0B;AAC5D;AACA,kCAAkC;AAClC,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,IAAI;AACJ;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA,uCAAuC;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;;AAEvC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA,2BAA2B;AAC3B;;AAEA,mBAAmB;AACnB;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;;;;;;AAMA;AACA;;;AAGA;AACA;;AAEA;;AAEA;AACA,gBAAgB,WAAW;AAC3B;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,0CAA0C,gBAAgB;AAC1D;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA,0CAA0C,gBAAgB;AAC1D;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA,0CAA0C,gBAAgB;AAC1D;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;;;;;;;AAQA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA,6CAA6C,EAAE;AAC/C;AACA,oDAAoD,EAAE,eAAe,EAAE,YAAY;;;AAGnF,uBAAuB;;AAEvB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,wBAAwB;AACxB;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,2BAA2B;AAC3B,2BAA2B;AAC3B,2BAA2B;AAC3B;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wCAAwC;AACxC;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,oDAAoD,qBAAqB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,8CAA8C;AAC9C;;AAEA;;AAEA,gDAAgD,kBAAkB;AAClE;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,+CAA+C,kBAAkB;AACjE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mDAAmD,kBAAkB;AACrE;AACA;AACA,MAAM;AACN;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,MAAM;AACN;;AAEA;AACA;AACA;;AAEA,MAAM;AACN;AACA;;AAEA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA,MAAM;AACN;AACA;AACA;;AAEA,MAAM;AACN;;AAEA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,MAAM;AACN;AACA;;AAEA;AACA;;AAEA;AACA,QAAQ;AACR;AACA;;AAEA,QAAQ;AACR;AACA;;AAEA,eAAe,eAAe;AAC9B;;AAEA;AACA;;AAEA,YAAY;AACZ;AACA;AACA;;AAEA;;AAEA;;AAEA,QAAQ;AACR;AACA;;AAEA;;AAEA,MAAM;AACN;AACA;AACA;;AAEA,MAAM;AACN;;AAEA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,sBAAsB;AACtB;AACA;AACA,IAAI,yBAAyB;AAC7B,sBAAsB,KAAK;AAC3B;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA,MAAM;AACN;AACA,6EAA6E;AAC7E,QAAQ;AACR;AACA;AACA,QAAQ;AACR;AACA;;AAEA,MAAM;AACN;AACA;AACA;;AAEA;AACA,SAAS;AACT;;AAEA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR,8BAA8B;AAC9B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ;AACR;AACA;;AAEA;AACA,QAAQ;AACR,8BAA8B;AAC9B;AACA;;AAEA;AACA,QAAQ;AACR;AACA;;AAEA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB;;AAExB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,QAAQ;AACR;AACA;AACA;;AAEA,QAAQ;AACR,6DAA6D,sBAAsB;AACnF;;AAEA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,UAAU;AACV,oEAAoE;;AAEpE,UAAU;AACV;AACA;AACA,uBAAuB;AACvB;;AAEA,QAAQ;AACR,+DAA+D;;AAE/D,QAAQ;AACR;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,IAAI;AACJ;AACA;AACA;;AAEA,IAAI;AACJ;AACA;;AAEA;;AAEA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;;AAEA,IAAI;AACJ;;AAEA,IAAI;AACJ;;AAEA,IAAI;AACJ;;AAEA,IAAI;AACJ;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA,UAAU;AACV;;AAEA;AACA;AACA;;AAEA,UAAU;AACV;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D;AAC9D;;AAEA,mEAAmE,0BAA0B;AAC7F;;AAEA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA,0DAA0D,0BAA0B;AACpF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,8EAA8E;AAC9E;;AAEA,kDAAkD;AAClD;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAI;AACJ;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,iDAAiD,gBAAgB;AACjE;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;AAMA;AACA;;AAEA;AACA,sCAAsC;AACtC,sCAAsC;AACtC,sCAAsC;AACtC,sCAAsC;AACtC,sCAAsC;AACtC,sCAAsC;AACtC,sCAAsC;AACtC,sCAAsC;AACtC,sCAAsC;AACtC,sCAAsC;AACtC,sCAAsC;AACtC,sCAAsC;AACtC,sCAAsC;AACtC,sCAAsC;AACtC,sCAAsC;AACtC,sCAAsC;AACtC,sCAAsC;AACtC,sCAAsC;AACtC,sCAAsC;AACtC,sCAAsC;AACtC,sCAAsC;AACtC,sCAAsC,KAAK;AAC3C,sCAAsC;AACtC,sCAAsC,KAAK;;AAE3C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA,wCAAwC,gBAAgB;AACxD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,uDAAuD,gBAAgB;AACvE;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,MAAM;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,8BAA8B;AAC9B;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,mBAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,gBAAgB,mBAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA,0BAA0B;AAC1B;;AAEA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,mBAAmB;AACrC;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C,gBAAgB;AAC1D;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C,gBAAgB;AAC1D;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gCAAgC;AAChC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iDAAiD,gBAAgB;;AAEjE;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gBAAgB;AAChB;;AAEA;;AAEA;;AAEA;AACA,gBAAgB;AAChB;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,iBAAiB,gBAAgB;AACjC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA,iDAAiD,gBAAgB;AACjE;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gBAAgB;AAChB;;AAEA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA,MAAM;AACN;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,6BAA6B,GAAG;AAChC;;AAEA;AACA;;AAEA;;AAEA,4CAA4C,gBAAgB;AAC5D;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,qDAAqD,gBAAgB;AACrE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;;AAEA;AACA,gDAAgD,gBAAgB;AAChE;AACA;AACA,QAAQ;AACR;;AAEA,uDAAuD,gBAAgB;AACvE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,kCAAkC,WAAW;AAC7C;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,MAAM,EAAC;AACyI","sources":["webpack://divemarkdownit/./node_modules/markdown-it-docutils/dist/esm/directives/admonitions.js","webpack://divemarkdownit/./node_modules/markdown-it-docutils/dist/esm/directives/code.js","webpack://divemarkdownit/./node_modules/markdown-it-docutils/dist/esm/directives/images.js","webpack://divemarkdownit/./node_modules/markdown-it-docutils/dist/esm/directives/index.js","webpack://divemarkdownit/./node_modules/markdown-it-docutils/dist/esm/directives/main.js","webpack://divemarkdownit/./node_modules/markdown-it-docutils/dist/esm/directives/math.js","webpack://divemarkdownit/./node_modules/markdown-it-docutils/dist/esm/directives/options.js","webpack://divemarkdownit/./node_modules/markdown-it-docutils/dist/esm/directives/plugin.js","webpack://divemarkdownit/./node_modules/markdown-it-docutils/dist/esm/directives/tables.js","webpack://divemarkdownit/./node_modules/markdown-it-docutils/dist/esm/index.js","webpack://divemarkdownit/./node_modules/markdown-it-docutils/dist/esm/nestedCoreParse.js","webpack://divemarkdownit/./node_modules/markdown-it-docutils/dist/esm/roles/html.js","webpack://divemarkdownit/./node_modules/markdown-it-docutils/dist/esm/roles/index.js","webpack://divemarkdownit/./node_modules/markdown-it-docutils/dist/esm/roles/main.js","webpack://divemarkdownit/./node_modules/markdown-it-docutils/dist/esm/roles/math.js","webpack://divemarkdownit/./node_modules/markdown-it-docutils/dist/esm/roles/plugin.js","webpack://divemarkdownit/./node_modules/markdown-it-docutils/dist/esm/roles/references.js","webpack://divemarkdownit/./node_modules/markdown-it-docutils/dist/esm/state/plugin.js","webpack://divemarkdownit/./node_modules/markdown-it-docutils/dist/esm/state/utils.js","webpack://divemarkdownit/./node_modules/markdown-it-docutils/dist/esm/syntaxTree.js","webpack://divemarkdownit/./node_modules/markdown-it-docutils/node_modules/js-yaml/dist/js-yaml.mjs"],"sourcesContent":["import { class_option, unchanged } from \"./options\";\nimport { Directive } from \"./main\";\n/** Directives for admonition boxes.\n *\n * Apdapted from: docutils/docutils/parsers/rst/directives/admonitions.py\n */\nclass BaseAdmonition extends Directive {\n    constructor() {\n        super(...arguments);\n        this.final_argument_whitespace = true;\n        this.has_content = true;\n        this.option_spec = {\n            class: class_option,\n            // TODO handle name option\n            name: unchanged\n        };\n        this.title = \"\";\n        this.kind = \"\";\n    }\n    run(data) {\n        var _a;\n        const newTokens = [];\n        // we create an overall container, then individual containers for the title and body\n        const adToken = this.createToken(\"admonition_open\", \"aside\", 1, {\n            map: data.map,\n            block: true,\n            meta: { kind: this.kind }\n        });\n        if (((_a = data.options.class) === null || _a === void 0 ? void 0 : _a.length) >= 1) {\n            // Custom class information must go first for styling\n            // For example, `class=tip, kind=seealso` should be styled as a `tip`\n            adToken.attrSet(\"class\", data.options.class.join(\" \"));\n            adToken.attrJoin(\"class\", \"admonition\");\n        }\n        else {\n            adToken.attrSet(\"class\", \"admonition\");\n        }\n        if (this.kind) {\n            adToken.attrJoin(\"class\", this.kind);\n        }\n        newTokens.push(adToken);\n        const adTokenTitle = this.createToken(\"admonition_title_open\", \"header\", 1);\n        adTokenTitle.attrSet(\"class\", \"admonition-title\");\n        newTokens.push(adTokenTitle);\n        // we want the title to be parsed as Markdown during the inline phase\n        const title = data.args[0] || this.title;\n        newTokens.push(this.createToken(\"inline\", \"\", 0, {\n            map: [data.map[0], data.map[0]],\n            content: title,\n            children: []\n        }));\n        newTokens.push(this.createToken(\"admonition_title_close\", \"header\", -1, { block: true }));\n        // run a recursive parse on the content of the admonition upto this stage\n        const bodyTokens = this.nestedParse(data.body, data.bodyMap[0]);\n        newTokens.push(...bodyTokens);\n        newTokens.push(this.createToken(\"admonition_close\", \"aside\", -1, { block: true }));\n        return newTokens;\n    }\n}\nexport class Admonition extends BaseAdmonition {\n    constructor() {\n        super(...arguments);\n        this.required_arguments = 1;\n    }\n}\nexport class Attention extends BaseAdmonition {\n    constructor() {\n        super(...arguments);\n        this.title = \"Attention\";\n        this.kind = \"attention\";\n    }\n}\nexport class Caution extends BaseAdmonition {\n    constructor() {\n        super(...arguments);\n        this.title = \"Caution\";\n        this.kind = \"caution\";\n    }\n}\nexport class Danger extends BaseAdmonition {\n    constructor() {\n        super(...arguments);\n        this.title = \"Danger\";\n        this.kind = \"danger\";\n    }\n}\nexport class Error extends BaseAdmonition {\n    constructor() {\n        super(...arguments);\n        this.title = \"Error\";\n        this.kind = \"error\";\n    }\n}\nexport class Important extends BaseAdmonition {\n    constructor() {\n        super(...arguments);\n        this.title = \"Important\";\n        this.kind = \"important\";\n    }\n}\nexport class Hint extends BaseAdmonition {\n    constructor() {\n        super(...arguments);\n        this.title = \"Hint\";\n        this.kind = \"hint\";\n    }\n}\nexport class Note extends BaseAdmonition {\n    constructor() {\n        super(...arguments);\n        this.title = \"Note\";\n        this.kind = \"note\";\n    }\n}\nexport class SeeAlso extends BaseAdmonition {\n    constructor() {\n        super(...arguments);\n        this.title = \"See Also\";\n        this.kind = \"seealso\";\n    }\n}\nexport class Tip extends BaseAdmonition {\n    constructor() {\n        super(...arguments);\n        this.title = \"Tip\";\n        this.kind = \"tip\";\n    }\n}\nexport class Warning extends BaseAdmonition {\n    constructor() {\n        super(...arguments);\n        this.title = \"Warning\";\n        this.kind = \"warning\";\n    }\n}\nexport const admonitions = {\n    admonition: Admonition,\n    attention: Attention,\n    caution: Caution,\n    danger: Danger,\n    error: Error,\n    important: Important,\n    hint: Hint,\n    note: Note,\n    seealso: SeeAlso,\n    tip: Tip,\n    warning: Warning\n};\n//# sourceMappingURL=admonitions.js.map","import { Directive } from \"./main\";\nimport { class_option, flag, int, optional_int, unchanged, unchanged_required } from \"./options\";\n// TODO add Highlight directive\n/** Mark up content of a code block\n *\n * Adapted from sphinx/directives/patches.py\n */\nexport class Code extends Directive {\n    constructor() {\n        super(...arguments);\n        this.required_arguments = 0;\n        this.optional_arguments = 1;\n        this.final_argument_whitespace = false;\n        this.has_content = true;\n        this.option_spec = {\n            /** Add line numbers, optionally starting from a particular number. */\n            \"number-lines\": optional_int,\n            /** Ignore minor errors on highlighting */\n            force: flag,\n            name: unchanged,\n            class: class_option\n        };\n    }\n    run(data) {\n        // TODO handle options\n        this.assert_has_content(data);\n        const token = this.createToken(\"fence\", \"code\", 0, {\n            // TODO if not specified, the language should come from a central configuration \"highlight_language\"\n            info: data.args ? data.args[0] : \"\",\n            content: data.body,\n            map: data.bodyMap\n        });\n        return [token];\n    }\n}\n/** Mark up content of a code block, with more settings\n *\n * Adapted from sphinx/directives/code.py\n */\nexport class CodeBlock extends Directive {\n    constructor() {\n        super(...arguments);\n        this.required_arguments = 0;\n        this.optional_arguments = 1;\n        this.final_argument_whitespace = false;\n        this.has_content = true;\n        this.option_spec = {\n            /** Add line numbers. */\n            linenos: flag,\n            /** Start line numbering from a particular value. */\n            \"lineno-start\": int,\n            /** Strip indentation characters from the code block.\n             * When number given, leading N characters are removed\n             */\n            dedent: optional_int,\n            /** Emphasize particular lines (comma-separated numbers) */\n            \"emphasize-lines\": unchanged_required,\n            caption: unchanged_required,\n            /** Ignore minor errors on highlighting */\n            force: flag,\n            name: unchanged,\n            class: class_option\n        };\n    }\n    run(data) {\n        // TODO handle options\n        this.assert_has_content(data);\n        const token = this.createToken(\"fence\", \"code\", 0, {\n            // TODO if not specified, the language should come from a central configuration \"highlight_language\"\n            info: data.args ? data.args[0] : \"\",\n            content: data.body,\n            map: data.bodyMap\n        });\n        return [token];\n    }\n}\n/** A code cell is a special MyST based cell, signifying executable code. */\nexport class CodeCell extends Directive {\n    constructor() {\n        super(...arguments);\n        this.required_arguments = 0;\n        this.optional_arguments = 1;\n        this.final_argument_whitespace = false;\n        this.has_content = true;\n        this.rawOptions = true;\n    }\n    run(data) {\n        // TODO store options and the fact that this is a code cell rather than a fence?\n        const token = this.createToken(\"fence\", \"code\", 0, {\n            info: data.args ? data.args[0] : \"\",\n            content: data.body,\n            map: data.bodyMap\n        });\n        return [token];\n    }\n}\nexport const code = {\n    code: Code,\n    \"code-block\": CodeBlock,\n    \"code-cell\": CodeCell\n};\n//# sourceMappingURL=code.js.map","import { newTarget, TargetKind } from \"../state/utils\";\nimport { Directive } from \"./main\";\nimport { class_option, create_choice, length_or_percentage_or_unitless, length_or_percentage_or_unitless_figure, length_or_unitless, percentage, unchanged, unchanged_required, uri } from \"./options\";\nconst shared_option_spec = {\n    alt: unchanged,\n    height: length_or_unitless,\n    width: length_or_percentage_or_unitless,\n    // TODO handle scale option\n    scale: percentage,\n    // TODO handle target option\n    target: unchanged_required,\n    class: class_option,\n    // TODO handle name option (note: should be applied to figure for Figure)\n    name: unchanged\n};\n/** Directive for a single image.\n *\n * Adapted from: docutils/docutils/parsers/rst/directives/images.py\n */\nexport class Image extends Directive {\n    constructor() {\n        super(...arguments);\n        this.required_arguments = 1;\n        this.optional_arguments = 0;\n        this.final_argument_whitespace = true;\n        this.option_spec = Object.assign(Object.assign({}, shared_option_spec), { align: create_choice([\"left\", \"center\", \"right\", \"top\", \"middle\", \"bottom\"]) });\n    }\n    create_image(data) {\n        // get URI\n        const src = uri(data.args[0] || \"\");\n        const token = this.createToken(\"image\", \"img\", 0, { map: data.map, block: true });\n        token.attrSet(\"src\", src);\n        token.attrSet(\"alt\", data.options.alt || \"\");\n        // TODO markdown-it default renderer requires the alt as children tokens\n        const altTokens = [];\n        if (data.options.alt) {\n            this.state.md.inline.parse(data.options.alt, this.state.md, this.state.env, altTokens);\n        }\n        token.children = altTokens;\n        if (data.options.height) {\n            token.attrSet(\"height\", data.options.height);\n        }\n        if (data.options.width) {\n            token.attrSet(\"width\", data.options.width);\n        }\n        if (data.options.align) {\n            token.attrJoin(\"class\", `align-${data.options.align}`);\n        }\n        if (data.options.class) {\n            token.attrJoin(\"class\", data.options.class.join(\" \"));\n        }\n        return token;\n    }\n    run(data) {\n        return [this.create_image(data)];\n    }\n}\n/** Directive for an image with caption.\n *\n * Adapted from: docutils/docutils/parsers/rst/directives/images.py,\n * and sphinx/directives/patches.py (patch to apply name to figure instead of image)\n */\nexport class Figure extends Image {\n    constructor() {\n        super(...arguments);\n        this.option_spec = Object.assign(Object.assign({}, shared_option_spec), { align: create_choice([\"left\", \"center\", \"right\"]), figwidth: length_or_percentage_or_unitless_figure, figclass: class_option });\n        this.has_content = true;\n    }\n    run(data) {\n        const openToken = this.createToken(\"figure_open\", \"figure\", 1, {\n            map: data.map,\n            block: true\n        });\n        if (data.options.figclass) {\n            openToken.attrJoin(\"class\", data.options.figclass.join(\" \"));\n        }\n        if (data.options.align) {\n            openToken.attrJoin(\"class\", `align-${data.options.align}`);\n        }\n        if (data.options.figwidth && data.options.figwidth !== \"image\") {\n            // TODO handle figwidth == \"image\"?\n            openToken.attrSet(\"width\", data.options.figwidth);\n        }\n        let target;\n        if (data.options.name) {\n            // TODO: figure out how to pass silent here\n            target = newTarget(this.state, openToken, TargetKind.figure, data.options.name, \n            // TODO: a better title?\n            data.body.trim());\n            openToken.attrJoin(\"class\", \"numbered\");\n        }\n        const imageToken = this.create_image(data);\n        imageToken.map = [data.map[0], data.map[0]];\n        let captionTokens = [];\n        let legendTokens = [];\n        if (data.body) {\n            const [caption, ...legendParts] = data.body.split(\"\\n\\n\");\n            const legend = legendParts.join(\"\\n\\n\");\n            const captionMap = data.bodyMap[0];\n            const openCaption = this.createToken(\"figure_caption_open\", \"figcaption\", 1, {\n                block: true\n            });\n            if (target) {\n                openCaption.attrSet(\"number\", `${target.number}`);\n            }\n            // TODO in docutils caption can only be single paragraph (or ignored if comment)\n            // then additional content is figure legend\n            const captionBody = this.nestedParse(caption, captionMap);\n            const closeCaption = this.createToken(\"figure_caption_close\", \"figcaption\", -1, {\n                block: true\n            });\n            captionTokens = [openCaption, ...captionBody, closeCaption];\n            if (legend) {\n                const legendMap = captionMap + caption.split(\"\\n\").length + 1;\n                const openLegend = this.createToken(\"figure_legend_open\", \"\", 1, {\n                    block: true\n                });\n                const legendBody = this.nestedParse(legend, legendMap);\n                const closeLegend = this.createToken(\"figure_legend_close\", \"\", -1, {\n                    block: true\n                });\n                legendTokens = [openLegend, ...legendBody, closeLegend];\n            }\n        }\n        const closeToken = this.createToken(\"figure_close\", \"figure\", -1, { block: true });\n        return [openToken, imageToken, ...captionTokens, ...legendTokens, closeToken];\n    }\n}\nexport const images = {\n    image: Image,\n    figure: Figure\n};\n//# sourceMappingURL=images.js.map","export { Directive } from \"./main\";\nexport { default as directivePlugin } from \"./plugin\";\nimport * as directiveOptions_1 from \"./options\";\nexport { directiveOptions_1 as directiveOptions };\nexport { admonitions } from \"./admonitions\";\nexport { code } from \"./code\";\nexport { images } from \"./images\";\nexport { tables } from \"./tables\";\nexport { math } from \"./math\";\nimport { admonitions } from \"./admonitions\";\nimport { code } from \"./code\";\nimport { images } from \"./images\";\nimport { tables } from \"./tables\";\nimport { math } from \"./math\";\nexport const directivesDefault = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, admonitions), images), code), tables), math);\n//# sourceMappingURL=index.js.map","/* eslint-disable @typescript-eslint/no-explicit-any */\n/** Convert a directives first line and content to its structural components\n *\n * The code is adapted from: myst_parser/parse_directives.py\n * and is common for all directives\n */\nimport yaml from \"js-yaml\";\nimport { nestedCoreParse } from \"../nestedCoreParse\";\n/** token specification for a directive */\nexport class DirectiveToken {\n    constructor(name, arg, content, map) {\n        this.type = \"directive\";\n        this.tag = \"\";\n        this.attrs = null;\n        this.nesting = 0;\n        this.level = 0;\n        this.children = null;\n        this.markup = \"\";\n        this.block = true;\n        this.hidden = false;\n        this.info = name;\n        this.meta = { arg };\n        this.content = content;\n        this.map = map;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    attrIndex(name) {\n        return -1;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    attrPush(attrData) {\n        throw new Error(\"not implemented\");\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    attrSet(name, value) {\n        throw new Error(\"not implemented\");\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    attrGet(name) {\n        return null;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    attrJoin(name, value) {\n        throw new Error(\"not implemented\");\n    }\n}\n/** A class to define a single directive */\nexport class Directive {\n    constructor(state) {\n        this.required_arguments = 0;\n        this.optional_arguments = 0;\n        this.final_argument_whitespace = false;\n        this.has_content = false;\n        this.option_spec = {};\n        this.rawOptions = false;\n        this.state = state;\n    }\n    /** Convert the directive data to tokens */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    run(data) {\n        return [];\n    }\n    assert(test, msg) {\n        if (!test) {\n            throw new Error(msg);\n        }\n    }\n    /** throw error is no body content parsed. */\n    assert_has_content(data) {\n        if (!data.body) {\n            throw new Error(\"Content block expected, but none found.\");\n        }\n    }\n    /** Create a single token */\n    createToken(type, tag, nesting, optional) {\n        const token = new this.state.Token(type, tag, nesting);\n        if ((optional === null || optional === void 0 ? void 0 : optional.content) !== undefined) {\n            token.content = optional.content;\n        }\n        if ((optional === null || optional === void 0 ? void 0 : optional.level) !== undefined) {\n            token.level = optional.level;\n        }\n        if ((optional === null || optional === void 0 ? void 0 : optional.map) !== undefined) {\n            token.map = optional.map;\n        }\n        if ((optional === null || optional === void 0 ? void 0 : optional.block) !== undefined) {\n            token.block = optional.block;\n        }\n        if ((optional === null || optional === void 0 ? void 0 : optional.info) !== undefined) {\n            token.info = optional.info;\n        }\n        if ((optional === null || optional === void 0 ? void 0 : optional.meta) !== undefined) {\n            token.meta = optional.meta;\n        }\n        if ((optional === null || optional === void 0 ? void 0 : optional.children) !== undefined) {\n            token.children = optional.children;\n        }\n        return token;\n    }\n    /** parse block of text to tokens (does not run inline parse) */\n    nestedParse(block, initLine) {\n        return nestedCoreParse(this.state.md, \"run_directives\", block, this.state.env, initLine, true);\n    }\n}\n/** Raise on parsing/validation error. */\nexport class DirectiveParsingError extends Error {\n    constructor() {\n        super(...arguments);\n        this.name = \"DirectiveParsingError\";\n    }\n}\n/**\n * This function contains the logic to take the first line of a directive,\n * and the content, and turn it into the three core components:\n * arguments (list), options (key: value mapping), and body (text).\n */\nexport default function directiveToData(token, directive) {\n    const firstLine = token.meta.arg || \"\";\n    const content = token.content;\n    let body = content.trim() ? content.split(/\\r?\\n/) : [];\n    let bodyOffset = 0;\n    let options = {};\n    if (Object.keys(directive.option_spec || {}) || directive.rawOptions) {\n        ;\n        [body, options, bodyOffset] = parseDirectiveOptions(body, directive);\n    }\n    let args = [];\n    if (!directive.required_arguments && !directive.optional_arguments) {\n        if (firstLine) {\n            bodyOffset = 0;\n            body = [firstLine].concat(body);\n        }\n    }\n    else {\n        args = parseDirectiveArguments(firstLine, directive);\n    }\n    // remove first line of body if blank, to allow space between the options and the content\n    if (body.length && !body[0].trim()) {\n        body.shift();\n        bodyOffset++;\n    }\n    // check for body content\n    if (body.length && !directive.has_content) {\n        throw new DirectiveParsingError(\"Has content but content not allowed\");\n    }\n    return {\n        map: token.map ? token.map : [0, 0],\n        args,\n        options,\n        body: body.join(\"\\n\"),\n        bodyMap: token.map\n            ? [\n                body.length > 0 ? token.map[0] + bodyOffset : token.map[1],\n                body.length > 0 ? token.map[1] - 1 : token.map[1]\n            ]\n            : [0, 0]\n    };\n}\nexport function parseDirectiveOptions(content, fullSpec) {\n    // instantiate options\n    let bodyOffset = 1;\n    let options = {};\n    let yamlBlock = null;\n    // TODO allow for indented content (I can't remember why this was needed?)\n    if (content.length && content[0].startsWith(\"---\")) {\n        // options contained in YAML block, ending with '---'\n        bodyOffset++;\n        const newContent = [];\n        yamlBlock = [];\n        let foundDivider = false;\n        for (const line of content.slice(1)) {\n            if (line.startsWith(\"---\")) {\n                bodyOffset++;\n                foundDivider = true;\n                continue;\n            }\n            if (foundDivider) {\n                newContent.push(line);\n            }\n            else {\n                bodyOffset++;\n                yamlBlock.push(line);\n            }\n        }\n        content = newContent;\n    }\n    else if (content.length && content[0].startsWith(\":\")) {\n        const newContent = [];\n        yamlBlock = [];\n        let foundDivider = false;\n        for (const line of content) {\n            if (!foundDivider && !line.startsWith(\":\")) {\n                foundDivider = true;\n                newContent.push(line);\n                continue;\n            }\n            if (foundDivider) {\n                newContent.push(line);\n            }\n            else {\n                bodyOffset++;\n                yamlBlock.push(line.slice(1));\n            }\n        }\n        content = newContent;\n    }\n    if (yamlBlock !== null) {\n        try {\n            const output = yaml.load(yamlBlock.join(\"\\n\"));\n            if (output !== null && typeof output === \"object\") {\n                options = output;\n            }\n            else {\n                throw new DirectiveParsingError(`not dict: ${output}`);\n            }\n        }\n        catch (error) {\n            throw new DirectiveParsingError(`Invalid options YAML: ${error}`);\n        }\n    }\n    if (fullSpec.rawOptions) {\n        return [content, options, bodyOffset];\n    }\n    for (const [name, value] of Object.entries(options)) {\n        const convertor = fullSpec.option_spec ? fullSpec.option_spec[name] : null;\n        if (!convertor) {\n            throw new DirectiveParsingError(`Unknown option: ${name}`);\n        }\n        let converted_value = value;\n        if (value === null || value === false) {\n            converted_value = \"\";\n        }\n        try {\n            // In docutils all values are simply read as strings,\n            // but loading with YAML these can be converted to other types, so we convert them back first\n            // TODO check that it is sufficient to simply do this conversion, or if there is a better way\n            converted_value = convertor(`${converted_value || \"\"}`);\n        }\n        catch (error) {\n            throw new DirectiveParsingError(`Invalid option value: (option: '${name}'; value: ${value})\\n${error}`);\n        }\n        options[name] = converted_value;\n    }\n    return [content, options, bodyOffset];\n}\nfunction parseDirectiveArguments(firstLine, fullSpec) {\n    var _a;\n    let args = firstLine.trim() ? (_a = firstLine.trim()) === null || _a === void 0 ? void 0 : _a.split(/\\s+/) : [];\n    const totalArgs = (fullSpec.required_arguments || 0) + (fullSpec.optional_arguments || 0);\n    if (args.length < (fullSpec.required_arguments || 0)) {\n        throw new DirectiveParsingError(`${fullSpec.required_arguments} argument(s) required, ${args.length} supplied`);\n    }\n    else if (args.length > totalArgs) {\n        if (fullSpec.final_argument_whitespace) {\n            // note split limit does not work the same as in python\n            const arr = firstLine.split(/\\s+/);\n            args = arr.splice(0, totalArgs - 1);\n            // TODO is it ok that we effectively replace all whitespace with single spaces?\n            args.push(arr.join(\" \"));\n        }\n        else {\n            throw new DirectiveParsingError(`maximum ${totalArgs} argument(s) allowed, ${args.length} supplied`);\n        }\n    }\n    return args;\n}\n//# sourceMappingURL=main.js.map","import { newTarget, TargetKind } from \"../state/utils\";\nimport { Directive } from \"./main\";\nimport { unchanged } from \"./options\";\n/** Math directive with a label\n */\nexport class Math extends Directive {\n    constructor() {\n        super(...arguments);\n        this.required_arguments = 0;\n        this.optional_arguments = 0;\n        this.final_argument_whitespace = false;\n        this.has_content = true;\n        this.option_spec = {\n            label: unchanged\n        };\n    }\n    run(data) {\n        // TODO handle options\n        this.assert_has_content(data);\n        const token = this.createToken(\"math_block\", \"div\", 0, {\n            content: data.body,\n            map: data.bodyMap,\n            block: true\n        });\n        token.attrSet(\"class\", \"math block\");\n        if (data.options.label) {\n            token.attrSet(\"id\", data.options.label);\n            const target = newTarget(this.state, token, TargetKind.equation, data.options.label, \"\");\n            token.attrSet(\"number\", `${target.number}`);\n            token.info = data.options.label;\n            token.meta = { label: data.options.label, numbered: true, number: target.number };\n        }\n        return [token];\n    }\n}\nexport const math = {\n    math: Math\n};\n//# sourceMappingURL=math.js.map","/* eslint-disable @typescript-eslint/no-explicit-any */\n/** Functions for converting and validating directive options\n *\n * Primarily adapted from: docutils/docutils/parsers/rst/directives/__init__.py\n */\n/**\n * Normalize a string to HTML4 id\n *\n * Adapted from docutils/nodes.py::make_id,\n * it should be noted that in HTML5 the only requirement is no whitespace.\n * */\nexport function make_id(name) {\n    // TODO make more complete\n    return name\n        .toLowerCase()\n        .split(/\\s+/)\n        .join(\"-\")\n        .replace(/[^a-z0-9]+/, \"-\")\n        .replace(/^[-0-9]+|-+$/, \"\");\n}\n/** Error to throw when an option is invalid. */\nexport class OptionSpecError extends Error {\n    constructor() {\n        super(...arguments);\n        this.name = \"OptionSpecError\";\n    }\n}\n/** Leave value unchanged */\nexport const unchanged = (value) => value;\n/** Leave value unchanged, but assert non-empty string */\nexport const unchanged_required = (value) => {\n    if (!value) {\n        throw new OptionSpecError(\"Argument required but none supplied\");\n    }\n    return value;\n};\n/** A flag option (no argument) */\nexport const flag = (value) => {\n    if (value.trim()) {\n        throw new OptionSpecError(`No argument is allowed: \"${value}\" supplied`);\n    }\n    return null;\n};\n/** Split values by whitespace and normalize to HTML4 id */\nexport const class_option = (value) => {\n    return `${value || \"\"}`.split(/\\s+/).map(name => make_id(name));\n};\n/** Check for an integer argument and convert */\nexport function int(argument) {\n    if (!argument) {\n        throw new OptionSpecError(\"Value is not set\");\n    }\n    const value = Number.parseFloat(argument);\n    if (Number.isNaN(value) || !Number.isInteger(value)) {\n        throw new OptionSpecError(`Value \"${argument}\" is not an integer`);\n    }\n    return value;\n}\n/** Check for a non-negative integer argument and convert */\nexport function nonnegative_int(argument) {\n    const value = int(argument);\n    if (value < 0) {\n        throw new OptionSpecError(`Value \"${argument}\" must be positive or zero`);\n    }\n    return value;\n}\n/** A non-negative integer or null. */\nexport const optional_int = (value) => {\n    if (!value) {\n        return null;\n    }\n    return nonnegative_int(value);\n};\n/** Check for an integer percentage value with optional percent sign. */\nexport const percentage = (value) => {\n    value = `${value || \"\"}`.replace(/\\s+%$/, \"\");\n    return nonnegative_int(value);\n};\n/** Check for a positive argument of one of the units and return a\n    normalized string of the form \"<value><unit>\" (without space in\n    between).\n*/\nfunction get_measure(argument, units) {\n    const regex = new RegExp(`^(?<number>[0-9.]+)\\\\s*(?<units>${units.join(\"|\")})$`);\n    const match = regex.exec(argument);\n    if (!match || !match.groups) {\n        throw new OptionSpecError(`not a positive measure of one of the following units: ${units.join(\"|\")}`);\n    }\n    return match.groups.number + match.groups.units;\n}\nconst length_units = [\"em\", \"ex\", \"px\", \"in\", \"cm\", \"mm\", \"pt\", \"pc\"];\n/** Check for a positive argument of a length unit, allowing for no unit. */\nexport const length_or_unitless = (value) => {\n    return get_measure(value, [...length_units, \"\"]);\n};\n/**\nReturn normalized string of a length or percentage unit.\n\nAdd <default> if there is no unit. Raise ValueError if the argument is not\na positive measure of one of the valid CSS units (or without unit).\n\n>>> length_or_percentage_or_unitless('3 pt')\n'3pt'\n>>> length_or_percentage_or_unitless('3%', 'em')\n'3%'\n>>> length_or_percentage_or_unitless('3')\n'3'\n>>> length_or_percentage_or_unitless('3', 'px')\n'3px'\n\n*/\nexport const length_or_percentage_or_unitless = (argument, defaultUnit = \"\") => {\n    try {\n        return get_measure(argument, [...length_units, \"%\"]);\n    }\n    catch (_a) {\n        return length_or_unitless(argument) + defaultUnit;\n    }\n};\nexport const length_or_percentage_or_unitless_figure = (argument, defaultUnit = \"\") => {\n    if (argument.toLowerCase() === \"image\") {\n        return \"image\";\n    }\n    return length_or_percentage_or_unitless(argument, defaultUnit);\n};\n/** Create an option that asserts the (lower-cased & trimmed) value is a member of a choice set. */\nexport function create_choice(choices) {\n    return (argument) => {\n        argument = argument.toLowerCase().trim();\n        if (choices.includes(argument)) {\n            return argument;\n        }\n        throw new OptionSpecError(`must be in: ${choices.join(\"|\")}`);\n    };\n}\n/** Return the URI argument with unescaped whitespace removed. */\nexport const uri = (value) => {\n    // TODO implement whitespace removal\n    return value;\n};\n//# sourceMappingURL=options.js.map","import directiveToData, { parseDirectiveOptions } from \"./main\";\nexport default function directivePlugin(md, options) {\n    var _a;\n    let after = options.directivesAfter || \"block\";\n    if ((_a = options.replaceFences) !== null && _a !== void 0 ? _a : true) {\n        md.core.ruler.after(after, \"fence_to_directive\", replaceFences);\n        after = \"fence_to_directive\";\n    }\n    md.core.ruler.after(after, \"run_directives\", runDirectives(options.directives || {}));\n    // fallback renderer for unhandled directives\n    md.renderer.rules[\"directive\"] = (tokens, idx) => {\n        const token = tokens[idx];\n        return `<aside class=\"directive-unhandled\">\\n<header><mark>${token.info}</mark><code> ${token.meta.arg}</code></header>\\n<pre>${token.content}</pre></aside>\\n`;\n    };\n    md.renderer.rules[\"directive_error\"] = (tokens, idx) => {\n        const token = tokens[idx];\n        let content = \"\";\n        if (token.content) {\n            content = `\\n---\\n${token.content}`;\n        }\n        return `<aside class=\"directive-error\">\\n<header><mark>${token.info}</mark><code> ${token.meta.arg}</code></header>\\n<pre>${token.meta.error_name}:\\n${token.meta.error_message}\\n${content}</pre></aside>\\n`;\n    };\n}\n/** Convert fences identified as directives to `directive` tokens */\nfunction replaceFences(state) {\n    for (const token of state.tokens) {\n        if (token.type === \"fence\") {\n            const match = token.info.match(/^\\{([^\\s}]+)\\}\\s*(.*)$/);\n            if (match) {\n                if (match[1] == \"mermaid\" || match[1] == \"railroad\")\n                    continue;\n                token.type = \"directive\";\n                token.info = match[1];\n                token.meta = { arg: match[2] };\n            }\n        }\n    }\n    return true;\n}\n/** Run all directives, replacing the original token */\nfunction runDirectives(directives) {\n    function func(state) {\n        const finalTokens = [];\n        for (const token of state.tokens) {\n            // TODO directive name translations\n            if (token.type === \"directive\" && token.info in directives) {\n                try {\n                    const directive = new directives[token.info](state);\n                    const data = directiveToData(token, directive);\n                    const [content, opts] = parseDirectiveOptions(token.content.trim() ? token.content.split(/\\r?\\n/) : [], directive);\n                    const directiveOpen = new state.Token(\"parsed_directive_open\", \"\", 1);\n                    directiveOpen.info = token.info;\n                    directiveOpen.hidden = true;\n                    directiveOpen.content = content.join(\"\\n\").trim();\n                    directiveOpen.meta = {\n                        arg: token.meta.arg,\n                        opts\n                    };\n                    const newTokens = [directiveOpen];\n                    newTokens.push(...directive.run(data));\n                    const directiveClose = new state.Token(\"parsed_directive_close\", \"\", -1);\n                    directiveClose.hidden = true;\n                    newTokens.push(directiveClose);\n                    // Ensure `meta` exists and add the directive options to parsed child\n                    newTokens[1].meta = Object.assign(Object.assign({ directive: true }, data.options), newTokens[1].meta);\n                    finalTokens.push(...newTokens);\n                }\n                catch (err) {\n                    const errorToken = new state.Token(\"directive_error\", \"\", 0);\n                    errorToken.content = token.content;\n                    errorToken.info = token.info;\n                    errorToken.meta = token.meta;\n                    errorToken.map = token.map;\n                    errorToken.meta.error_message = err.message;\n                    errorToken.meta.error_name = err.name;\n                    finalTokens.push(errorToken);\n                }\n            }\n            else {\n                finalTokens.push(token);\n            }\n        }\n        state.tokens = finalTokens;\n        return true;\n    }\n    return func;\n}\n//# sourceMappingURL=plugin.js.map","import { SyntaxTreeNode } from \"../syntaxTree\";\nimport { Directive, DirectiveParsingError } from \"./main\";\nimport { class_option, create_choice, length_or_percentage_or_unitless, nonnegative_int, unchanged } from \"./options\";\nexport class ListTable extends Directive {\n    constructor() {\n        super(...arguments);\n        this.required_arguments = 0;\n        this.optional_arguments = 1;\n        this.final_argument_whitespace = true;\n        this.has_content = true;\n        this.option_spec = {\n            \"header-rows\": nonnegative_int,\n            \"stub-columns\": nonnegative_int,\n            width: length_or_percentage_or_unitless,\n            widths: unchanged,\n            class: class_option,\n            name: unchanged,\n            align: create_choice([\"left\", \"center\", \"right\"])\n        };\n    }\n    run(data) {\n        // TODO support all options (add colgroup for widths)\n        // Parse content\n        this.assert_has_content(data);\n        const headerRows = (data.options[\"header-rows\"] || 0);\n        const listTokens = this.nestedParse(data.body, data.bodyMap[0]);\n        // Check content is a list\n        if (listTokens.length < 2 ||\n            listTokens[0].type !== \"bullet_list_open\" ||\n            listTokens[listTokens.length - 1].type !== \"bullet_list_close\") {\n            throw new DirectiveParsingError(\"Content is not a single bullet list\");\n        }\n        // generate tokens\n        const tokens = [];\n        // table opening\n        const tableOpen = this.createToken(\"table_open\", \"table\", 1, { map: data.bodyMap });\n        if (data.options.align) {\n            tableOpen.attrJoin(\"class\", `align-${data.options.align}`);\n        }\n        if (data.options.class) {\n            tableOpen.attrJoin(\"class\", data.options.class.join(\" \"));\n        }\n        tokens.push(tableOpen);\n        // add caption\n        if (data.args.length && data.args[0]) {\n            tokens.push(this.createToken(\"table_caption_open\", \"caption\", 1));\n            tokens.push(this.createToken(\"inline\", \"\", 0, {\n                map: [data.map[0], data.map[0]],\n                content: data.args[0],\n                children: []\n            }));\n            tokens.push(this.createToken(\"table_caption_close\", \"caption\", -1));\n        }\n        let colType = \"th\";\n        if (headerRows) {\n            tokens.push(this.createToken(\"thead_open\", \"thead\", 1, { level: 1 }));\n            colType = \"th\";\n        }\n        else {\n            tokens.push(this.createToken(\"tbody_open\", \"tbody\", 1, { level: 1 }));\n            colType = \"td\";\n        }\n        let rowLength = undefined;\n        let rowNumber = 0;\n        for (const child of new SyntaxTreeNode(listTokens.slice(1, -1)).children) {\n            rowNumber += 1;\n            this.assert(child.type === \"list_item\", `list item ${rowNumber} not of type 'list_item': ${child.type}`);\n            this.assert(child.children.length === 1 && child.children[0].type === \"bullet_list\", `list item ${rowNumber} content not a nested bullet list`);\n            const row = child.children[0].children;\n            if (rowLength === undefined) {\n                rowLength = row.length;\n            }\n            else {\n                this.assert(row.length === rowLength, `list item ${rowNumber} does not contain the same number of columns as previous items`);\n            }\n            if (headerRows && rowNumber === headerRows + 1) {\n                tokens.push(this.createToken(\"thead_close\", \"thead\", -1, { level: 1 }));\n                tokens.push(this.createToken(\"tbody_open\", \"tbody\", 1, { level: 1 }));\n                colType = \"td\";\n            }\n            tokens.push(this.createToken(\"tr_open\", \"tr\", 1, { map: child.map, level: 2 }));\n            for (const column of row) {\n                tokens.push(this.createToken(`${colType}_open`, colType, 1, { map: column.map, level: 3 }));\n                // TODO if the list is not tight then all paragraphs will be un-hidden maybe we don't want this?\n                tokens.push(...column.to_tokens().slice(1, -1));\n                tokens.push(this.createToken(`${colType}_close`, colType, -1, { level: 3 }));\n            }\n            tokens.push(this.createToken(\"tr_close\", \"tr\", -1, { level: 2 }));\n        }\n        if (headerRows && rowNumber < headerRows) {\n            throw new Error(`Insufficient rows (${rowNumber}) for required header rows (${headerRows})`);\n        }\n        // closing tokens\n        if (colType === \"td\") {\n            tokens.push(this.createToken(\"tbody_close\", \"tbody\", -1, { level: 1 }));\n        }\n        else {\n            tokens.push(this.createToken(\"thead_close\", \"thead\", -1, { level: 1 }));\n        }\n        tokens.push(this.createToken(\"table_close\", \"table\", -1));\n        return tokens;\n    }\n}\nexport const tables = {\n    \"list-table\": ListTable\n};\n//# sourceMappingURL=tables.js.map","import { rolesDefault, Role, rolePlugin } from \"./roles\";\nimport { directivesDefault, Directive, directivePlugin, directiveOptions } from \"./directives\";\nimport statePlugin from \"./state/plugin\";\nexport { rolesDefault, rolePlugin, Role };\nexport { directivesDefault, directivePlugin, Directive, directiveOptions };\n/** Default options for docutils plugin */\nconst OptionDefaults = {\n    parseRoles: true,\n    replaceFences: true,\n    rolesAfter: \"inline\",\n    directivesAfter: \"block\",\n    directives: directivesDefault,\n    roles: rolesDefault\n};\n/**\n * A markdown-it plugin for implementing docutils style roles and directives.\n */\nexport function docutilsPlugin(md, options) {\n    const fullOptions = Object.assign(Object.assign({}, OptionDefaults), options);\n    md.use(rolePlugin, fullOptions);\n    md.use(directivePlugin, fullOptions);\n    md.use(statePlugin, fullOptions);\n}\n// Note: Exporting default and the function as a named export.\n//       This helps with Jest integration in downstream packages.\nexport default docutilsPlugin;\n//# sourceMappingURL=index.js.map","/** Perform a nested parse upto and including a particular ruleName\n *\n * The main use for this function is to perform nested parses\n * upto but not including inline parsing.\n */\nexport function nestedCoreParse(md, pluginRuleName, src, \n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\nenv, initLine, includeRule = true) {\n    // disable all core rules after pluginRuleName\n    const tempDisabledCore = [];\n    // TODO __rules__ is currently not exposed in typescript, but is the only way to get the rule names,\n    // since md.core.ruler.getRules('') only returns the rule functions\n    // we should upstream a getRuleNames() function or similar\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore TS2339\n    for (const rule of [...md.core.ruler.__rules__].reverse()) {\n        if (rule.name === pluginRuleName) {\n            if (!includeRule) {\n                tempDisabledCore.push(rule.name);\n            }\n            break;\n        }\n        if (rule.name) {\n            tempDisabledCore.push(rule.name);\n        }\n    }\n    md.core.ruler.disable(tempDisabledCore);\n    let tokens = [];\n    try {\n        tokens = md.parse(src, env);\n    }\n    finally {\n        md.core.ruler.enable(tempDisabledCore);\n    }\n    for (const token of tokens) {\n        token.map =\n            token.map !== null\n                ? [token.map[0] + initLine, token.map[1] + initLine]\n                : token.map;\n    }\n    return tokens;\n}\n//# sourceMappingURL=nestedCoreParse.js.map","import { Role } from \"./main\";\nexport class Subscript extends Role {\n    run(data) {\n        const open = new this.state.Token(\"sub_open\", \"sub\", 1);\n        open.markup = \"~\";\n        const text = new this.state.Token(\"text\", \"\", 0);\n        text.content = data.content;\n        const close = new this.state.Token(\"sub_close\", \"sub\", -1);\n        close.markup = \"~\";\n        return [open, text, close];\n    }\n}\nexport class Superscript extends Role {\n    run(data) {\n        const open = new this.state.Token(\"sup_open\", \"sup\", 1);\n        open.markup = \"~\";\n        const text = new this.state.Token(\"text\", \"\", 0);\n        text.content = data.content;\n        const close = new this.state.Token(\"sup_close\", \"sup\", -1);\n        close.markup = \"~\";\n        return [open, text, close];\n    }\n}\nconst ABBR_PATTERN = /^(.+?)\\(([^()]+)\\)$/; // e.g. 'CSS (Cascading Style Sheets)'\nexport class Abbreviation extends Role {\n    run(data) {\n        var _a, _b, _c, _d;\n        const match = ABBR_PATTERN.exec(data.content);\n        const content = (_b = (_a = match === null || match === void 0 ? void 0 : match[1]) === null || _a === void 0 ? void 0 : _a.trim()) !== null && _b !== void 0 ? _b : data.content.trim();\n        const title = (_d = (_c = match === null || match === void 0 ? void 0 : match[2]) === null || _c === void 0 ? void 0 : _c.trim()) !== null && _d !== void 0 ? _d : null;\n        const open = new this.state.Token(\"abbr_open\", \"abbr\", 1);\n        if (title)\n            open.attrSet(\"title\", title);\n        const text = new this.state.Token(\"text\", \"\", 0);\n        text.content = content;\n        const close = new this.state.Token(\"abbr_close\", \"abbr\", -1);\n        return [open, text, close];\n    }\n}\nexport const html = {\n    // Subscript\n    subscript: Subscript,\n    sub: Subscript,\n    // Superscript\n    superscript: Superscript,\n    sup: Superscript,\n    // Abbreviation\n    abbreviation: Abbreviation,\n    abbr: Abbreviation\n};\n//# sourceMappingURL=html.js.map","export { Role, main } from \"./main\";\nexport { default as rolePlugin } from \"./plugin\";\nexport { math } from \"./math\";\nexport { html } from \"./html\";\nexport { references } from \"./references\";\nimport { main } from \"./main\";\nimport { math } from \"./math\";\nimport { html } from \"./html\";\nimport { references } from \"./references\";\nexport const rolesDefault = Object.assign(Object.assign(Object.assign(Object.assign({}, main), html), math), references);\n//# sourceMappingURL=index.js.map","/* eslint-disable @typescript-eslint/no-explicit-any */\n/** A class to define a single role */\nexport class Role {\n    constructor(state) {\n        this.state = state;\n    }\n    /** Convert the role to tokens */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    run(data) {\n        return [];\n    }\n}\nexport class RawRole extends Role {\n    run(data) {\n        // TODO options\n        const token = new this.state.Token(\"code_inline\", \"code\", 0);\n        token.content = data.content;\n        return [token];\n    }\n}\nexport const main = {\n    raw: RawRole\n};\n//# sourceMappingURL=main.js.map","import { Role } from \"./main\";\nconst INLINE_MATH_RULE = \"math_inline\";\nexport class Math extends Role {\n    run(data) {\n        const inline = new this.state.Token(INLINE_MATH_RULE, \"span\", 0);\n        inline.attrSet(\"class\", \"math inline\");\n        inline.markup = \"$\";\n        inline.content = data.content;\n        return [inline];\n    }\n}\nexport function inlineMathRenderer(md, options) {\n    var _a;\n    // Only create the renderer if it does not exist\n    // For example, this may be defined in markdown-it-dollarmath\n    if (!((_a = options === null || options === void 0 ? void 0 : options.roles) === null || _a === void 0 ? void 0 : _a.math) || md.renderer.rules[INLINE_MATH_RULE])\n        return;\n    md.renderer.rules[INLINE_MATH_RULE] = (tokens, idx) => {\n        var _a, _b, _c;\n        const renderer = (_c = (_b = (_a = options === null || options === void 0 ? void 0 : options.opts) === null || _a === void 0 ? void 0 : _a.math) === null || _b === void 0 ? void 0 : _b.renderer) !== null && _c !== void 0 ? _c : (c => md.utils.escapeHtml(c));\n        const token = tokens[idx];\n        const content = token.content.trim();\n        const math = renderer(content, { displayMode: false });\n        return `<span class=\"${token.attrGet(\"class\")}\">${math}</span>`;\n    };\n}\nexport const math = {\n    math: Math\n};\n//# sourceMappingURL=math.js.map","/** Parse a role, in MyST format */\n// Ported from https://github.com/executablebooks/markdown-it-py/blob/master/markdown_it/extensions/myst_role/index.py\n// MIT License: https://github.com/executablebooks/markdown-it-py/blob/master/LICENSE\nimport { inlineMathRenderer } from \"./math\";\nexport default function rolePlugin(md, options) {\n    if (options.parseRoles) {\n        md.inline.ruler.before(\"backticks\", \"parse_roles\", roleRule);\n    }\n    md.core.ruler.after(options.rolesAfter || \"inline\", \"run_roles\", runRoles(options.roles || {}));\n    // fallback renderer for unhandled roles\n    md.renderer.rules[\"role\"] = (tokens, idx) => {\n        const token = tokens[idx];\n        return `<span class=\"role-unhandled\"><mark>${token.meta.name}</mark><code>${token.content}</code></span>`;\n    };\n    // TODO: when another renderer comes up, refactor into something a bit more scalable\n    inlineMathRenderer(md, options);\n    // TODO role_error renderer\n}\nfunction roleRule(state, silent) {\n    // Check if the role is escaped\n    if (state.src.charCodeAt(state.pos - 1) === 0x5c) {\n        /* \\ */\n        // TODO: this could be improved in the case of edge case '\\\\{', also multi-line\n        return false;\n    }\n    const match = ROLE_PATTERN.exec(state.src.slice(state.pos));\n    if (match == null)\n        return false;\n    const [str, name, , content] = match;\n    // eslint-disable-next-line no-param-reassign\n    state.pos += str.length;\n    if (!silent) {\n        const token = state.push(\"role\", \"\", 0);\n        token.meta = { name };\n        token.content = content;\n    }\n    return true;\n}\n// MyST role syntax format e.g. {role}`text`\n// TODO: support role with no value e.g. {role}``\nlet _x;\ntry {\n    _x = new RegExp(\"^\\\\{([a-zA-Z_\\\\-+:]{1,36})\\\\}(`+)(?!`)(.+?)(?<!`)\\\\2(?!`)\");\n}\ncatch (error) {\n    // Safari does not support negative look-behinds\n    // This is a slightly down-graded variant, as it does not require a space.\n    _x = /^\\{([a-zA-Z_\\-+:]{1,36})\\}(`+)(?!`)(.+?)\\2(?!`)/;\n}\nconst ROLE_PATTERN = _x;\n/** Run all roles, replacing the original token */\nfunction runRoles(roles) {\n    function func(state) {\n        var _a;\n        for (const token of state.tokens) {\n            if (token.type === \"inline\" && token.children) {\n                const childTokens = [];\n                for (const child of token.children) {\n                    // TODO role name translations\n                    if (child.type === \"role\" && ((_a = child.meta) === null || _a === void 0 ? void 0 : _a.name) in roles) {\n                        try {\n                            const role = new roles[child.meta.name](state);\n                            const roleOpen = new state.Token(\"parsed_role_open\", \"\", 1);\n                            roleOpen.content = child.content;\n                            roleOpen.hidden = true;\n                            roleOpen.meta = { name: child.meta.name };\n                            roleOpen.block = false;\n                            const newTokens = [roleOpen];\n                            newTokens.push(...role.run({\n                                parentMap: token.map,\n                                content: child.content\n                            }));\n                            const roleClose = new state.Token(\"parsed_role_close\", \"\", -1);\n                            roleClose.block = false;\n                            roleClose.hidden = true;\n                            newTokens.push(roleClose);\n                            childTokens.push(...newTokens);\n                        }\n                        catch (err) {\n                            const errorToken = new state.Token(\"role_error\", \"\", 0);\n                            errorToken.content = child.content;\n                            errorToken.info = child.info;\n                            errorToken.meta = child.meta;\n                            errorToken.map = child.map;\n                            errorToken.meta.error_message = err.message;\n                            errorToken.meta.error_name = err.name;\n                            childTokens.push(errorToken);\n                        }\n                    }\n                    else {\n                        childTokens.push(child);\n                    }\n                }\n                token.children = childTokens;\n            }\n        }\n        return true;\n    }\n    return func;\n}\n//# sourceMappingURL=plugin.js.map","import { resolveRefLater, TargetKind } from \"../state/utils\";\nimport { Role } from \"./main\";\nconst REF_PATTERN = /^(.+?)<([^<>]+)>$/; // e.g. 'Labeled Reference <ref>'\nexport class Eq extends Role {\n    run(data) {\n        const open = new this.state.Token(\"ref_open\", \"a\", 1);\n        const content = new this.state.Token(\"text\", \"\", 0);\n        const close = new this.state.Token(\"ref_close\", \"a\", -1);\n        resolveRefLater(this.state, { open, content, close }, { kind: \"eq\", label: data.content }, {\n            kind: TargetKind.equation,\n            contentFromTarget: target => {\n                return `(${target.number})`;\n            }\n        });\n        return [open, content, close];\n    }\n}\nexport class NumRef extends Role {\n    run(data) {\n        const match = REF_PATTERN.exec(data.content);\n        const [, modified, ref] = match !== null && match !== void 0 ? match : [];\n        const withoutLabel = modified === null || modified === void 0 ? void 0 : modified.trim();\n        const open = new this.state.Token(\"ref_open\", \"a\", 1);\n        const content = new this.state.Token(\"text\", \"\", 0);\n        const close = new this.state.Token(\"ref_close\", \"a\", -1);\n        resolveRefLater(this.state, { open, content, close }, { kind: \"numref\", label: ref || data.content, value: withoutLabel }, {\n            contentFromTarget: target => {\n                if (!match)\n                    return target.title.trim();\n                return withoutLabel\n                    .replace(/%s/g, String(target.number))\n                    .replace(/\\{number\\}/g, String(target.number));\n            }\n        });\n        return [open, content, close];\n    }\n}\nexport class Ref extends Role {\n    run(data) {\n        const match = REF_PATTERN.exec(data.content);\n        const [, modified, ref] = match !== null && match !== void 0 ? match : [];\n        const withoutLabel = modified === null || modified === void 0 ? void 0 : modified.trim();\n        const open = new this.state.Token(\"ref_open\", \"a\", 1);\n        const content = new this.state.Token(\"text\", \"\", 0);\n        const close = new this.state.Token(\"ref_close\", \"a\", -1);\n        resolveRefLater(this.state, { open, content, close }, { kind: \"ref\", label: ref || data.content, value: withoutLabel }, {\n            contentFromTarget: target => {\n                return withoutLabel || target.title;\n            }\n        });\n        return [open, content, close];\n    }\n}\nexport const references = {\n    eq: Eq,\n    ref: Ref,\n    numref: NumRef\n};\n//# sourceMappingURL=references.js.map","import { getDocState } from \"./utils\";\nfunction numberingRule(options) {\n    return (state) => {\n        const env = getDocState(state);\n        env.references.forEach(ref => {\n            const { label, tokens, contentFromTarget } = ref;\n            const setError = (details, error) => {\n                tokens.open.attrJoin(\"class\", \"error\");\n                tokens.open.tag = tokens.close.tag = \"code\";\n                if (contentFromTarget && error) {\n                    tokens.content.content = contentFromTarget(error);\n                }\n                else {\n                    tokens.content.content = details;\n                }\n                return true;\n            };\n            const target = env.targets[label];\n            if (!target)\n                return setError(label, {\n                    kind: ref.kind || \"\",\n                    label,\n                    title: label,\n                    number: `\"${label}\"`\n                });\n            if (ref.kind && target.kind !== ref.kind) {\n                return setError(`Reference \"${label}\" does not match kind \"${ref.kind}\"`);\n            }\n            tokens.open.attrSet(\"href\", `#${target.label}`);\n            if (target.title)\n                tokens.open.attrSet(\"title\", target.title);\n            if (contentFromTarget)\n                tokens.content.content = contentFromTarget(target).trim();\n        });\n        // TODO: Math that wasn't pre-numbered?\n        return true;\n    };\n}\n/**\n * Create a rule that runs at the end of a markdown-it parser to go through all\n * references and add their targets.\n *\n * This `Rule` is done *last*, as you may reference a figure/equation, when that `Target`\n * has not yet been created. The references call `resolveRefLater` when they are being\n * created and pass their tokens such that the content of those tokens can be\n * dynamically updated.\n *\n * @param options (none currently)\n * @returns The markdown-it Rule\n */\nexport default function statePlugin(md, options) {\n    md.core.ruler.push(\"docutils_number\", numberingRule(options));\n}\n//# sourceMappingURL=plugin.js.map","/** The kind of the target as a TargetKind enum ('fig', 'eq', etc.) */\nexport var TargetKind;\n(function (TargetKind) {\n    TargetKind[\"equation\"] = \"eq\";\n    TargetKind[\"figure\"] = \"fig\";\n    TargetKind[\"table\"] = \"table\";\n    TargetKind[\"code\"] = \"code\";\n    TargetKind[\"section\"] = \"sec\";\n})(TargetKind || (TargetKind = {}));\n/** Safely create the document state for docutils */\nexport function getDocState(state) {\n    var _a, _b;\n    const env = (_b = (_a = state.env) === null || _a === void 0 ? void 0 : _a.docutils) !== null && _b !== void 0 ? _b : {};\n    if (!env.targets)\n        env.targets = {};\n    if (!env.references)\n        env.references = [];\n    if (!env.numbering)\n        env.numbering = {};\n    if (!state.env.docutils)\n        state.env.docutils = env;\n    return env;\n}\n/**\n * Safely create a namespaced meta information on a token\n * @param token A markdown-it token that will contain the target\n * @returns An object containing a `Target`\n */\nexport function getNamespacedMeta(token) {\n    var _a, _b;\n    const meta = (_b = (_a = token.meta) === null || _a === void 0 ? void 0 : _a.docutils) !== null && _b !== void 0 ? _b : {};\n    if (!token.meta)\n        token.meta = {};\n    if (!token.meta.docutils)\n        token.meta.docutils = meta;\n    return meta;\n}\n/** Get the next number for an equation, figure, code or table\n *\n * Can input `{ docutils: { numbering: { eq: 100 } } }` to start counting at a different number.\n *\n * @param state MarkdownIt state that will be modified\n */\nfunction nextNumber(state, kind) {\n    const env = getDocState(state);\n    if (env.numbering[kind] == null) {\n        env.numbering[kind] = 1;\n    }\n    else {\n        env.numbering[kind] += 1;\n    }\n    return env.numbering[kind];\n}\n/** Create a new internal target.\n *\n * @param state MarkdownIt state that will be modified\n * @param label The reference label that will be normalized and used to associate the target. Note some directives use \"name\".\n * @param kind The target kind: \"eq\", \"code\", \"table\" or \"fig\"\n */\nexport function newTarget(state, token, kind, label, title, silent = false) {\n    const env = getDocState(state);\n    const number = nextNumber(state, kind);\n    const target = {\n        label,\n        kind,\n        number,\n        title\n    };\n    if (!silent) {\n        // Put the token in both the token.meta and the central environment\n        const meta = getNamespacedMeta(token);\n        meta.target = target;\n        token.attrSet(\"id\", label);\n        // TODO: raise error on duplicates\n        env.targets[label] = target;\n    }\n    return target;\n}\n/**\n * Resolve a reference **in-place** in a following numbering pass.\n *\n * @param state Reference to the state object\n * @param tokens The open/content/close tokens of the reference\n * @param name Name/label/identifier of the target\n * @param opts Includes the reference `kind` and an optional way to create the reference content\n */\nexport function resolveRefLater(state, tokens, data, opts) {\n    var _a;\n    tokens.open.meta = (_a = tokens.open.meta) !== null && _a !== void 0 ? _a : {};\n    tokens.open.meta.kind = data.kind;\n    tokens.open.meta.label = data.label;\n    tokens.open.meta.value = data.value;\n    const env = getDocState(state);\n    env.references.push(Object.assign({ label: data.label, tokens }, opts));\n}\n//# sourceMappingURL=utils.js.map","/**A Markdown syntax tree node.\n\nA class that can be used to construct a tree representation of a linear\n`markdown-it` token stream.\n\nEach node in the tree represents either:\n    - root of the Markdown document\n    - a single unnested `Token`\n    - a `Token` \"_open\" and \"_close\" token pair, and the tokens nested in\n        between\n*/\nexport class SyntaxTreeNode {\n    /** Initialize a `SyntaxTreeNode` from a token stream. */\n    constructor(tokens, create_root = true) {\n        this.children = [];\n        this.children = [];\n        if (create_root) {\n            this._set_children_from_tokens(tokens);\n            return;\n        }\n        if (tokens.length === 0) {\n            throw new Error(\"Tree creation: Can only create root from empty token sequence.\");\n        }\n        if (tokens.length === 1) {\n            const inline_token = tokens[0];\n            if (inline_token.nesting) {\n                throw new Error(\"Unequal nesting level at the start and end of token stream.\");\n            }\n            this.token = inline_token;\n            if (inline_token.children !== null && inline_token.children.length > 0) {\n                this._set_children_from_tokens(inline_token.children);\n            }\n        }\n        else {\n            this.nester_tokens = { opening: tokens[0], closing: tokens[tokens.length - 1] };\n            this._set_children_from_tokens(tokens.slice(1, -1));\n        }\n    }\n    _set_children_from_tokens(tokens) {\n        const revered_tokens = [...tokens].reverse();\n        let token;\n        while (revered_tokens.length > 0) {\n            token = revered_tokens.pop();\n            if (!token) {\n                break;\n            }\n            if (!token.nesting) {\n                this._add_child([token]);\n                continue;\n            }\n            if (token.nesting !== 1) {\n                throw new Error(\"Invalid token nesting\");\n            }\n            const nested_tokens = [token];\n            let nesting = 1;\n            while (revered_tokens.length > 0 && nesting !== 0) {\n                token = revered_tokens.pop();\n                if (token) {\n                    nested_tokens.push(token);\n                    nesting += token.nesting;\n                }\n            }\n            if (nesting) {\n                throw new Error(`unclosed tokens starting: ${nested_tokens[0]}`);\n            }\n            this._add_child(nested_tokens);\n        }\n    }\n    _add_child(tokens) {\n        const child = new SyntaxTreeNode(tokens, false);\n        child.parent = this;\n        this.children.push(child);\n    }\n    /** Recover the linear token stream. */\n    to_tokens() {\n        function recursive_collect_tokens(node, token_list) {\n            if (node.type === \"root\") {\n                for (const child of node.children) {\n                    recursive_collect_tokens(child, token_list);\n                }\n            }\n            else if (node.token) {\n                token_list.push(node.token);\n            }\n            else {\n                if (!node.nester_tokens) {\n                    throw new Error(\"No nested token available\");\n                }\n                token_list.push(node.nester_tokens.opening);\n                for (const child of node.children) {\n                    recursive_collect_tokens(child, token_list);\n                }\n                token_list.push(node.nester_tokens.closing);\n            }\n        }\n        const tokens = [];\n        recursive_collect_tokens(this, tokens);\n        return tokens;\n    }\n    /** Is the node a special root node? */\n    get is_root() {\n        return !(this.token || this.nester_tokens);\n    }\n    /** Is this node nested? */\n    get is_nested() {\n        return !!this.nester_tokens;\n    }\n    /** Get siblings of the node (including self). */\n    get siblings() {\n        if (!this.parent) {\n            return [this];\n        }\n        return this.parent.children;\n    }\n    /** Recursively yield all descendant nodes in the tree starting at self.\n     *\n     * The order mimics the order of the underlying linear token stream (i.e. depth first).\n     */\n    *walk(include_self = true) {\n        if (include_self) {\n            yield this;\n        }\n        for (const child of this.children) {\n            yield* child.walk(true);\n        }\n    }\n    /** Get a string type of the represented syntax.\n     *\n      - \"root\" for root nodes\n      - `Token.type` if the node represents an un-nested token\n      - `Token.type` of the opening token, with \"_open\" suffix stripped, if\n          the node represents a nester token pair\n    */\n    get type() {\n        var _a, _b, _c;\n        if (this.is_root) {\n            return \"root\";\n        }\n        if (this.token) {\n            return this.token.type;\n        }\n        if ((_a = this.nester_tokens) === null || _a === void 0 ? void 0 : _a.opening.type.endsWith(\"_open\")) {\n            return (_b = this.nester_tokens) === null || _b === void 0 ? void 0 : _b.opening.type.slice(0, -5);\n        }\n        if (this.nester_tokens) {\n            return (_c = this.nester_tokens) === null || _c === void 0 ? void 0 : _c.opening.type;\n        }\n        throw new Error(\"no internal token\");\n    }\n    attribute_token() {\n        if (this.token) {\n            return this.token;\n        }\n        if (this.nester_tokens) {\n            return this.nester_tokens.opening;\n        }\n        throw new Error(\"Tree node does not have the accessed attribute\");\n    }\n    get tag() {\n        return this.attribute_token().tag;\n    }\n    get level() {\n        return this.attribute_token().level;\n    }\n    get content() {\n        return this.attribute_token().content;\n    }\n    get markup() {\n        return this.attribute_token().markup;\n    }\n    get info() {\n        return this.attribute_token().info;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    get meta() {\n        return this.attribute_token().meta;\n    }\n    get block() {\n        return this.attribute_token().block;\n    }\n    get hidden() {\n        return this.attribute_token().hidden;\n    }\n    get map() {\n        return this.attribute_token().map;\n    }\n    get attrs() {\n        return this.attribute_token().attrs;\n    }\n}\n//# sourceMappingURL=syntaxTree.js.map","\n/*! js-yaml 4.1.0 https://github.com/nodeca/js-yaml @license MIT */\nfunction isNothing(subject) {\n  return (typeof subject === 'undefined') || (subject === null);\n}\n\n\nfunction isObject(subject) {\n  return (typeof subject === 'object') && (subject !== null);\n}\n\n\nfunction toArray(sequence) {\n  if (Array.isArray(sequence)) return sequence;\n  else if (isNothing(sequence)) return [];\n\n  return [ sequence ];\n}\n\n\nfunction extend(target, source) {\n  var index, length, key, sourceKeys;\n\n  if (source) {\n    sourceKeys = Object.keys(source);\n\n    for (index = 0, length = sourceKeys.length; index < length; index += 1) {\n      key = sourceKeys[index];\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\n\nfunction repeat(string, count) {\n  var result = '', cycle;\n\n  for (cycle = 0; cycle < count; cycle += 1) {\n    result += string;\n  }\n\n  return result;\n}\n\n\nfunction isNegativeZero(number) {\n  return (number === 0) && (Number.NEGATIVE_INFINITY === 1 / number);\n}\n\n\nvar isNothing_1      = isNothing;\nvar isObject_1       = isObject;\nvar toArray_1        = toArray;\nvar repeat_1         = repeat;\nvar isNegativeZero_1 = isNegativeZero;\nvar extend_1         = extend;\n\nvar common = {\n\tisNothing: isNothing_1,\n\tisObject: isObject_1,\n\ttoArray: toArray_1,\n\trepeat: repeat_1,\n\tisNegativeZero: isNegativeZero_1,\n\textend: extend_1\n};\n\n// YAML error class. http://stackoverflow.com/questions/8458984\n\n\nfunction formatError(exception, compact) {\n  var where = '', message = exception.reason || '(unknown reason)';\n\n  if (!exception.mark) return message;\n\n  if (exception.mark.name) {\n    where += 'in \"' + exception.mark.name + '\" ';\n  }\n\n  where += '(' + (exception.mark.line + 1) + ':' + (exception.mark.column + 1) + ')';\n\n  if (!compact && exception.mark.snippet) {\n    where += '\\n\\n' + exception.mark.snippet;\n  }\n\n  return message + ' ' + where;\n}\n\n\nfunction YAMLException$1(reason, mark) {\n  // Super constructor\n  Error.call(this);\n\n  this.name = 'YAMLException';\n  this.reason = reason;\n  this.mark = mark;\n  this.message = formatError(this, false);\n\n  // Include stack trace in error object\n  if (Error.captureStackTrace) {\n    // Chrome and NodeJS\n    Error.captureStackTrace(this, this.constructor);\n  } else {\n    // FF, IE 10+ and Safari 6+. Fallback for others\n    this.stack = (new Error()).stack || '';\n  }\n}\n\n\n// Inherit from Error\nYAMLException$1.prototype = Object.create(Error.prototype);\nYAMLException$1.prototype.constructor = YAMLException$1;\n\n\nYAMLException$1.prototype.toString = function toString(compact) {\n  return this.name + ': ' + formatError(this, compact);\n};\n\n\nvar exception = YAMLException$1;\n\n// get snippet for a single line, respecting maxLength\nfunction getLine(buffer, lineStart, lineEnd, position, maxLineLength) {\n  var head = '';\n  var tail = '';\n  var maxHalfLength = Math.floor(maxLineLength / 2) - 1;\n\n  if (position - lineStart > maxHalfLength) {\n    head = ' ... ';\n    lineStart = position - maxHalfLength + head.length;\n  }\n\n  if (lineEnd - position > maxHalfLength) {\n    tail = ' ...';\n    lineEnd = position + maxHalfLength - tail.length;\n  }\n\n  return {\n    str: head + buffer.slice(lineStart, lineEnd).replace(/\\t/g, '→') + tail,\n    pos: position - lineStart + head.length // relative position\n  };\n}\n\n\nfunction padStart(string, max) {\n  return common.repeat(' ', max - string.length) + string;\n}\n\n\nfunction makeSnippet(mark, options) {\n  options = Object.create(options || null);\n\n  if (!mark.buffer) return null;\n\n  if (!options.maxLength) options.maxLength = 79;\n  if (typeof options.indent      !== 'number') options.indent      = 1;\n  if (typeof options.linesBefore !== 'number') options.linesBefore = 3;\n  if (typeof options.linesAfter  !== 'number') options.linesAfter  = 2;\n\n  var re = /\\r?\\n|\\r|\\0/g;\n  var lineStarts = [ 0 ];\n  var lineEnds = [];\n  var match;\n  var foundLineNo = -1;\n\n  while ((match = re.exec(mark.buffer))) {\n    lineEnds.push(match.index);\n    lineStarts.push(match.index + match[0].length);\n\n    if (mark.position <= match.index && foundLineNo < 0) {\n      foundLineNo = lineStarts.length - 2;\n    }\n  }\n\n  if (foundLineNo < 0) foundLineNo = lineStarts.length - 1;\n\n  var result = '', i, line;\n  var lineNoLength = Math.min(mark.line + options.linesAfter, lineEnds.length).toString().length;\n  var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);\n\n  for (i = 1; i <= options.linesBefore; i++) {\n    if (foundLineNo - i < 0) break;\n    line = getLine(\n      mark.buffer,\n      lineStarts[foundLineNo - i],\n      lineEnds[foundLineNo - i],\n      mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i]),\n      maxLineLength\n    );\n    result = common.repeat(' ', options.indent) + padStart((mark.line - i + 1).toString(), lineNoLength) +\n      ' | ' + line.str + '\\n' + result;\n  }\n\n  line = getLine(mark.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark.position, maxLineLength);\n  result += common.repeat(' ', options.indent) + padStart((mark.line + 1).toString(), lineNoLength) +\n    ' | ' + line.str + '\\n';\n  result += common.repeat('-', options.indent + lineNoLength + 3 + line.pos) + '^' + '\\n';\n\n  for (i = 1; i <= options.linesAfter; i++) {\n    if (foundLineNo + i >= lineEnds.length) break;\n    line = getLine(\n      mark.buffer,\n      lineStarts[foundLineNo + i],\n      lineEnds[foundLineNo + i],\n      mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i]),\n      maxLineLength\n    );\n    result += common.repeat(' ', options.indent) + padStart((mark.line + i + 1).toString(), lineNoLength) +\n      ' | ' + line.str + '\\n';\n  }\n\n  return result.replace(/\\n$/, '');\n}\n\n\nvar snippet = makeSnippet;\n\nvar TYPE_CONSTRUCTOR_OPTIONS = [\n  'kind',\n  'multi',\n  'resolve',\n  'construct',\n  'instanceOf',\n  'predicate',\n  'represent',\n  'representName',\n  'defaultStyle',\n  'styleAliases'\n];\n\nvar YAML_NODE_KINDS = [\n  'scalar',\n  'sequence',\n  'mapping'\n];\n\nfunction compileStyleAliases(map) {\n  var result = {};\n\n  if (map !== null) {\n    Object.keys(map).forEach(function (style) {\n      map[style].forEach(function (alias) {\n        result[String(alias)] = style;\n      });\n    });\n  }\n\n  return result;\n}\n\nfunction Type$1(tag, options) {\n  options = options || {};\n\n  Object.keys(options).forEach(function (name) {\n    if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {\n      throw new exception('Unknown option \"' + name + '\" is met in definition of \"' + tag + '\" YAML type.');\n    }\n  });\n\n  // TODO: Add tag format check.\n  this.options       = options; // keep original options in case user wants to extend this type later\n  this.tag           = tag;\n  this.kind          = options['kind']          || null;\n  this.resolve       = options['resolve']       || function () { return true; };\n  this.construct     = options['construct']     || function (data) { return data; };\n  this.instanceOf    = options['instanceOf']    || null;\n  this.predicate     = options['predicate']     || null;\n  this.represent     = options['represent']     || null;\n  this.representName = options['representName'] || null;\n  this.defaultStyle  = options['defaultStyle']  || null;\n  this.multi         = options['multi']         || false;\n  this.styleAliases  = compileStyleAliases(options['styleAliases'] || null);\n\n  if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {\n    throw new exception('Unknown kind \"' + this.kind + '\" is specified for \"' + tag + '\" YAML type.');\n  }\n}\n\nvar type = Type$1;\n\n/*eslint-disable max-len*/\n\n\n\n\n\nfunction compileList(schema, name) {\n  var result = [];\n\n  schema[name].forEach(function (currentType) {\n    var newIndex = result.length;\n\n    result.forEach(function (previousType, previousIndex) {\n      if (previousType.tag === currentType.tag &&\n          previousType.kind === currentType.kind &&\n          previousType.multi === currentType.multi) {\n\n        newIndex = previousIndex;\n      }\n    });\n\n    result[newIndex] = currentType;\n  });\n\n  return result;\n}\n\n\nfunction compileMap(/* lists... */) {\n  var result = {\n        scalar: {},\n        sequence: {},\n        mapping: {},\n        fallback: {},\n        multi: {\n          scalar: [],\n          sequence: [],\n          mapping: [],\n          fallback: []\n        }\n      }, index, length;\n\n  function collectType(type) {\n    if (type.multi) {\n      result.multi[type.kind].push(type);\n      result.multi['fallback'].push(type);\n    } else {\n      result[type.kind][type.tag] = result['fallback'][type.tag] = type;\n    }\n  }\n\n  for (index = 0, length = arguments.length; index < length; index += 1) {\n    arguments[index].forEach(collectType);\n  }\n  return result;\n}\n\n\nfunction Schema$1(definition) {\n  return this.extend(definition);\n}\n\n\nSchema$1.prototype.extend = function extend(definition) {\n  var implicit = [];\n  var explicit = [];\n\n  if (definition instanceof type) {\n    // Schema.extend(type)\n    explicit.push(definition);\n\n  } else if (Array.isArray(definition)) {\n    // Schema.extend([ type1, type2, ... ])\n    explicit = explicit.concat(definition);\n\n  } else if (definition && (Array.isArray(definition.implicit) || Array.isArray(definition.explicit))) {\n    // Schema.extend({ explicit: [ type1, type2, ... ], implicit: [ type1, type2, ... ] })\n    if (definition.implicit) implicit = implicit.concat(definition.implicit);\n    if (definition.explicit) explicit = explicit.concat(definition.explicit);\n\n  } else {\n    throw new exception('Schema.extend argument should be a Type, [ Type ], ' +\n      'or a schema definition ({ implicit: [...], explicit: [...] })');\n  }\n\n  implicit.forEach(function (type$1) {\n    if (!(type$1 instanceof type)) {\n      throw new exception('Specified list of YAML types (or a single Type object) contains a non-Type object.');\n    }\n\n    if (type$1.loadKind && type$1.loadKind !== 'scalar') {\n      throw new exception('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');\n    }\n\n    if (type$1.multi) {\n      throw new exception('There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.');\n    }\n  });\n\n  explicit.forEach(function (type$1) {\n    if (!(type$1 instanceof type)) {\n      throw new exception('Specified list of YAML types (or a single Type object) contains a non-Type object.');\n    }\n  });\n\n  var result = Object.create(Schema$1.prototype);\n\n  result.implicit = (this.implicit || []).concat(implicit);\n  result.explicit = (this.explicit || []).concat(explicit);\n\n  result.compiledImplicit = compileList(result, 'implicit');\n  result.compiledExplicit = compileList(result, 'explicit');\n  result.compiledTypeMap  = compileMap(result.compiledImplicit, result.compiledExplicit);\n\n  return result;\n};\n\n\nvar schema = Schema$1;\n\nvar str = new type('tag:yaml.org,2002:str', {\n  kind: 'scalar',\n  construct: function (data) { return data !== null ? data : ''; }\n});\n\nvar seq = new type('tag:yaml.org,2002:seq', {\n  kind: 'sequence',\n  construct: function (data) { return data !== null ? data : []; }\n});\n\nvar map = new type('tag:yaml.org,2002:map', {\n  kind: 'mapping',\n  construct: function (data) { return data !== null ? data : {}; }\n});\n\nvar failsafe = new schema({\n  explicit: [\n    str,\n    seq,\n    map\n  ]\n});\n\nfunction resolveYamlNull(data) {\n  if (data === null) return true;\n\n  var max = data.length;\n\n  return (max === 1 && data === '~') ||\n         (max === 4 && (data === 'null' || data === 'Null' || data === 'NULL'));\n}\n\nfunction constructYamlNull() {\n  return null;\n}\n\nfunction isNull(object) {\n  return object === null;\n}\n\nvar _null = new type('tag:yaml.org,2002:null', {\n  kind: 'scalar',\n  resolve: resolveYamlNull,\n  construct: constructYamlNull,\n  predicate: isNull,\n  represent: {\n    canonical: function () { return '~';    },\n    lowercase: function () { return 'null'; },\n    uppercase: function () { return 'NULL'; },\n    camelcase: function () { return 'Null'; },\n    empty:     function () { return '';     }\n  },\n  defaultStyle: 'lowercase'\n});\n\nfunction resolveYamlBoolean(data) {\n  if (data === null) return false;\n\n  var max = data.length;\n\n  return (max === 4 && (data === 'true' || data === 'True' || data === 'TRUE')) ||\n         (max === 5 && (data === 'false' || data === 'False' || data === 'FALSE'));\n}\n\nfunction constructYamlBoolean(data) {\n  return data === 'true' ||\n         data === 'True' ||\n         data === 'TRUE';\n}\n\nfunction isBoolean(object) {\n  return Object.prototype.toString.call(object) === '[object Boolean]';\n}\n\nvar bool = new type('tag:yaml.org,2002:bool', {\n  kind: 'scalar',\n  resolve: resolveYamlBoolean,\n  construct: constructYamlBoolean,\n  predicate: isBoolean,\n  represent: {\n    lowercase: function (object) { return object ? 'true' : 'false'; },\n    uppercase: function (object) { return object ? 'TRUE' : 'FALSE'; },\n    camelcase: function (object) { return object ? 'True' : 'False'; }\n  },\n  defaultStyle: 'lowercase'\n});\n\nfunction isHexCode(c) {\n  return ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) ||\n         ((0x41/* A */ <= c) && (c <= 0x46/* F */)) ||\n         ((0x61/* a */ <= c) && (c <= 0x66/* f */));\n}\n\nfunction isOctCode(c) {\n  return ((0x30/* 0 */ <= c) && (c <= 0x37/* 7 */));\n}\n\nfunction isDecCode(c) {\n  return ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */));\n}\n\nfunction resolveYamlInteger(data) {\n  if (data === null) return false;\n\n  var max = data.length,\n      index = 0,\n      hasDigits = false,\n      ch;\n\n  if (!max) return false;\n\n  ch = data[index];\n\n  // sign\n  if (ch === '-' || ch === '+') {\n    ch = data[++index];\n  }\n\n  if (ch === '0') {\n    // 0\n    if (index + 1 === max) return true;\n    ch = data[++index];\n\n    // base 2, base 8, base 16\n\n    if (ch === 'b') {\n      // base 2\n      index++;\n\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (ch !== '0' && ch !== '1') return false;\n        hasDigits = true;\n      }\n      return hasDigits && ch !== '_';\n    }\n\n\n    if (ch === 'x') {\n      // base 16\n      index++;\n\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (!isHexCode(data.charCodeAt(index))) return false;\n        hasDigits = true;\n      }\n      return hasDigits && ch !== '_';\n    }\n\n\n    if (ch === 'o') {\n      // base 8\n      index++;\n\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (!isOctCode(data.charCodeAt(index))) return false;\n        hasDigits = true;\n      }\n      return hasDigits && ch !== '_';\n    }\n  }\n\n  // base 10 (except 0)\n\n  // value should not start with `_`;\n  if (ch === '_') return false;\n\n  for (; index < max; index++) {\n    ch = data[index];\n    if (ch === '_') continue;\n    if (!isDecCode(data.charCodeAt(index))) {\n      return false;\n    }\n    hasDigits = true;\n  }\n\n  // Should have digits and should not end with `_`\n  if (!hasDigits || ch === '_') return false;\n\n  return true;\n}\n\nfunction constructYamlInteger(data) {\n  var value = data, sign = 1, ch;\n\n  if (value.indexOf('_') !== -1) {\n    value = value.replace(/_/g, '');\n  }\n\n  ch = value[0];\n\n  if (ch === '-' || ch === '+') {\n    if (ch === '-') sign = -1;\n    value = value.slice(1);\n    ch = value[0];\n  }\n\n  if (value === '0') return 0;\n\n  if (ch === '0') {\n    if (value[1] === 'b') return sign * parseInt(value.slice(2), 2);\n    if (value[1] === 'x') return sign * parseInt(value.slice(2), 16);\n    if (value[1] === 'o') return sign * parseInt(value.slice(2), 8);\n  }\n\n  return sign * parseInt(value, 10);\n}\n\nfunction isInteger(object) {\n  return (Object.prototype.toString.call(object)) === '[object Number]' &&\n         (object % 1 === 0 && !common.isNegativeZero(object));\n}\n\nvar int = new type('tag:yaml.org,2002:int', {\n  kind: 'scalar',\n  resolve: resolveYamlInteger,\n  construct: constructYamlInteger,\n  predicate: isInteger,\n  represent: {\n    binary:      function (obj) { return obj >= 0 ? '0b' + obj.toString(2) : '-0b' + obj.toString(2).slice(1); },\n    octal:       function (obj) { return obj >= 0 ? '0o'  + obj.toString(8) : '-0o'  + obj.toString(8).slice(1); },\n    decimal:     function (obj) { return obj.toString(10); },\n    /* eslint-disable max-len */\n    hexadecimal: function (obj) { return obj >= 0 ? '0x' + obj.toString(16).toUpperCase() :  '-0x' + obj.toString(16).toUpperCase().slice(1); }\n  },\n  defaultStyle: 'decimal',\n  styleAliases: {\n    binary:      [ 2,  'bin' ],\n    octal:       [ 8,  'oct' ],\n    decimal:     [ 10, 'dec' ],\n    hexadecimal: [ 16, 'hex' ]\n  }\n});\n\nvar YAML_FLOAT_PATTERN = new RegExp(\n  // 2.5e4, 2.5 and integers\n  '^(?:[-+]?(?:[0-9][0-9_]*)(?:\\\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?' +\n  // .2e4, .2\n  // special case, seems not from spec\n  '|\\\\.[0-9_]+(?:[eE][-+]?[0-9]+)?' +\n  // .inf\n  '|[-+]?\\\\.(?:inf|Inf|INF)' +\n  // .nan\n  '|\\\\.(?:nan|NaN|NAN))$');\n\nfunction resolveYamlFloat(data) {\n  if (data === null) return false;\n\n  if (!YAML_FLOAT_PATTERN.test(data) ||\n      // Quick hack to not allow integers end with `_`\n      // Probably should update regexp & check speed\n      data[data.length - 1] === '_') {\n    return false;\n  }\n\n  return true;\n}\n\nfunction constructYamlFloat(data) {\n  var value, sign;\n\n  value  = data.replace(/_/g, '').toLowerCase();\n  sign   = value[0] === '-' ? -1 : 1;\n\n  if ('+-'.indexOf(value[0]) >= 0) {\n    value = value.slice(1);\n  }\n\n  if (value === '.inf') {\n    return (sign === 1) ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;\n\n  } else if (value === '.nan') {\n    return NaN;\n  }\n  return sign * parseFloat(value, 10);\n}\n\n\nvar SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;\n\nfunction representYamlFloat(object, style) {\n  var res;\n\n  if (isNaN(object)) {\n    switch (style) {\n      case 'lowercase': return '.nan';\n      case 'uppercase': return '.NAN';\n      case 'camelcase': return '.NaN';\n    }\n  } else if (Number.POSITIVE_INFINITY === object) {\n    switch (style) {\n      case 'lowercase': return '.inf';\n      case 'uppercase': return '.INF';\n      case 'camelcase': return '.Inf';\n    }\n  } else if (Number.NEGATIVE_INFINITY === object) {\n    switch (style) {\n      case 'lowercase': return '-.inf';\n      case 'uppercase': return '-.INF';\n      case 'camelcase': return '-.Inf';\n    }\n  } else if (common.isNegativeZero(object)) {\n    return '-0.0';\n  }\n\n  res = object.toString(10);\n\n  // JS stringifier can build scientific format without dots: 5e-100,\n  // while YAML requres dot: 5.e-100. Fix it with simple hack\n\n  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace('e', '.e') : res;\n}\n\nfunction isFloat(object) {\n  return (Object.prototype.toString.call(object) === '[object Number]') &&\n         (object % 1 !== 0 || common.isNegativeZero(object));\n}\n\nvar float = new type('tag:yaml.org,2002:float', {\n  kind: 'scalar',\n  resolve: resolveYamlFloat,\n  construct: constructYamlFloat,\n  predicate: isFloat,\n  represent: representYamlFloat,\n  defaultStyle: 'lowercase'\n});\n\nvar json = failsafe.extend({\n  implicit: [\n    _null,\n    bool,\n    int,\n    float\n  ]\n});\n\nvar core = json;\n\nvar YAML_DATE_REGEXP = new RegExp(\n  '^([0-9][0-9][0-9][0-9])'          + // [1] year\n  '-([0-9][0-9])'                    + // [2] month\n  '-([0-9][0-9])$');                   // [3] day\n\nvar YAML_TIMESTAMP_REGEXP = new RegExp(\n  '^([0-9][0-9][0-9][0-9])'          + // [1] year\n  '-([0-9][0-9]?)'                   + // [2] month\n  '-([0-9][0-9]?)'                   + // [3] day\n  '(?:[Tt]|[ \\\\t]+)'                 + // ...\n  '([0-9][0-9]?)'                    + // [4] hour\n  ':([0-9][0-9])'                    + // [5] minute\n  ':([0-9][0-9])'                    + // [6] second\n  '(?:\\\\.([0-9]*))?'                 + // [7] fraction\n  '(?:[ \\\\t]*(Z|([-+])([0-9][0-9]?)' + // [8] tz [9] tz_sign [10] tz_hour\n  '(?::([0-9][0-9]))?))?$');           // [11] tz_minute\n\nfunction resolveYamlTimestamp(data) {\n  if (data === null) return false;\n  if (YAML_DATE_REGEXP.exec(data) !== null) return true;\n  if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;\n  return false;\n}\n\nfunction constructYamlTimestamp(data) {\n  var match, year, month, day, hour, minute, second, fraction = 0,\n      delta = null, tz_hour, tz_minute, date;\n\n  match = YAML_DATE_REGEXP.exec(data);\n  if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);\n\n  if (match === null) throw new Error('Date resolve error');\n\n  // match: [1] year [2] month [3] day\n\n  year = +(match[1]);\n  month = +(match[2]) - 1; // JS month starts with 0\n  day = +(match[3]);\n\n  if (!match[4]) { // no hour\n    return new Date(Date.UTC(year, month, day));\n  }\n\n  // match: [4] hour [5] minute [6] second [7] fraction\n\n  hour = +(match[4]);\n  minute = +(match[5]);\n  second = +(match[6]);\n\n  if (match[7]) {\n    fraction = match[7].slice(0, 3);\n    while (fraction.length < 3) { // milli-seconds\n      fraction += '0';\n    }\n    fraction = +fraction;\n  }\n\n  // match: [8] tz [9] tz_sign [10] tz_hour [11] tz_minute\n\n  if (match[9]) {\n    tz_hour = +(match[10]);\n    tz_minute = +(match[11] || 0);\n    delta = (tz_hour * 60 + tz_minute) * 60000; // delta in mili-seconds\n    if (match[9] === '-') delta = -delta;\n  }\n\n  date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));\n\n  if (delta) date.setTime(date.getTime() - delta);\n\n  return date;\n}\n\nfunction representYamlTimestamp(object /*, style*/) {\n  return object.toISOString();\n}\n\nvar timestamp = new type('tag:yaml.org,2002:timestamp', {\n  kind: 'scalar',\n  resolve: resolveYamlTimestamp,\n  construct: constructYamlTimestamp,\n  instanceOf: Date,\n  represent: representYamlTimestamp\n});\n\nfunction resolveYamlMerge(data) {\n  return data === '<<' || data === null;\n}\n\nvar merge = new type('tag:yaml.org,2002:merge', {\n  kind: 'scalar',\n  resolve: resolveYamlMerge\n});\n\n/*eslint-disable no-bitwise*/\n\n\n\n\n\n// [ 64, 65, 66 ] -> [ padding, CR, LF ]\nvar BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\\n\\r';\n\n\nfunction resolveYamlBinary(data) {\n  if (data === null) return false;\n\n  var code, idx, bitlen = 0, max = data.length, map = BASE64_MAP;\n\n  // Convert one by one.\n  for (idx = 0; idx < max; idx++) {\n    code = map.indexOf(data.charAt(idx));\n\n    // Skip CR/LF\n    if (code > 64) continue;\n\n    // Fail on illegal characters\n    if (code < 0) return false;\n\n    bitlen += 6;\n  }\n\n  // If there are any bits left, source was corrupted\n  return (bitlen % 8) === 0;\n}\n\nfunction constructYamlBinary(data) {\n  var idx, tailbits,\n      input = data.replace(/[\\r\\n=]/g, ''), // remove CR/LF & padding to simplify scan\n      max = input.length,\n      map = BASE64_MAP,\n      bits = 0,\n      result = [];\n\n  // Collect by 6*4 bits (3 bytes)\n\n  for (idx = 0; idx < max; idx++) {\n    if ((idx % 4 === 0) && idx) {\n      result.push((bits >> 16) & 0xFF);\n      result.push((bits >> 8) & 0xFF);\n      result.push(bits & 0xFF);\n    }\n\n    bits = (bits << 6) | map.indexOf(input.charAt(idx));\n  }\n\n  // Dump tail\n\n  tailbits = (max % 4) * 6;\n\n  if (tailbits === 0) {\n    result.push((bits >> 16) & 0xFF);\n    result.push((bits >> 8) & 0xFF);\n    result.push(bits & 0xFF);\n  } else if (tailbits === 18) {\n    result.push((bits >> 10) & 0xFF);\n    result.push((bits >> 2) & 0xFF);\n  } else if (tailbits === 12) {\n    result.push((bits >> 4) & 0xFF);\n  }\n\n  return new Uint8Array(result);\n}\n\nfunction representYamlBinary(object /*, style*/) {\n  var result = '', bits = 0, idx, tail,\n      max = object.length,\n      map = BASE64_MAP;\n\n  // Convert every three bytes to 4 ASCII characters.\n\n  for (idx = 0; idx < max; idx++) {\n    if ((idx % 3 === 0) && idx) {\n      result += map[(bits >> 18) & 0x3F];\n      result += map[(bits >> 12) & 0x3F];\n      result += map[(bits >> 6) & 0x3F];\n      result += map[bits & 0x3F];\n    }\n\n    bits = (bits << 8) + object[idx];\n  }\n\n  // Dump tail\n\n  tail = max % 3;\n\n  if (tail === 0) {\n    result += map[(bits >> 18) & 0x3F];\n    result += map[(bits >> 12) & 0x3F];\n    result += map[(bits >> 6) & 0x3F];\n    result += map[bits & 0x3F];\n  } else if (tail === 2) {\n    result += map[(bits >> 10) & 0x3F];\n    result += map[(bits >> 4) & 0x3F];\n    result += map[(bits << 2) & 0x3F];\n    result += map[64];\n  } else if (tail === 1) {\n    result += map[(bits >> 2) & 0x3F];\n    result += map[(bits << 4) & 0x3F];\n    result += map[64];\n    result += map[64];\n  }\n\n  return result;\n}\n\nfunction isBinary(obj) {\n  return Object.prototype.toString.call(obj) ===  '[object Uint8Array]';\n}\n\nvar binary = new type('tag:yaml.org,2002:binary', {\n  kind: 'scalar',\n  resolve: resolveYamlBinary,\n  construct: constructYamlBinary,\n  predicate: isBinary,\n  represent: representYamlBinary\n});\n\nvar _hasOwnProperty$3 = Object.prototype.hasOwnProperty;\nvar _toString$2       = Object.prototype.toString;\n\nfunction resolveYamlOmap(data) {\n  if (data === null) return true;\n\n  var objectKeys = [], index, length, pair, pairKey, pairHasKey,\n      object = data;\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    pair = object[index];\n    pairHasKey = false;\n\n    if (_toString$2.call(pair) !== '[object Object]') return false;\n\n    for (pairKey in pair) {\n      if (_hasOwnProperty$3.call(pair, pairKey)) {\n        if (!pairHasKey) pairHasKey = true;\n        else return false;\n      }\n    }\n\n    if (!pairHasKey) return false;\n\n    if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);\n    else return false;\n  }\n\n  return true;\n}\n\nfunction constructYamlOmap(data) {\n  return data !== null ? data : [];\n}\n\nvar omap = new type('tag:yaml.org,2002:omap', {\n  kind: 'sequence',\n  resolve: resolveYamlOmap,\n  construct: constructYamlOmap\n});\n\nvar _toString$1 = Object.prototype.toString;\n\nfunction resolveYamlPairs(data) {\n  if (data === null) return true;\n\n  var index, length, pair, keys, result,\n      object = data;\n\n  result = new Array(object.length);\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    pair = object[index];\n\n    if (_toString$1.call(pair) !== '[object Object]') return false;\n\n    keys = Object.keys(pair);\n\n    if (keys.length !== 1) return false;\n\n    result[index] = [ keys[0], pair[keys[0]] ];\n  }\n\n  return true;\n}\n\nfunction constructYamlPairs(data) {\n  if (data === null) return [];\n\n  var index, length, pair, keys, result,\n      object = data;\n\n  result = new Array(object.length);\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    pair = object[index];\n\n    keys = Object.keys(pair);\n\n    result[index] = [ keys[0], pair[keys[0]] ];\n  }\n\n  return result;\n}\n\nvar pairs = new type('tag:yaml.org,2002:pairs', {\n  kind: 'sequence',\n  resolve: resolveYamlPairs,\n  construct: constructYamlPairs\n});\n\nvar _hasOwnProperty$2 = Object.prototype.hasOwnProperty;\n\nfunction resolveYamlSet(data) {\n  if (data === null) return true;\n\n  var key, object = data;\n\n  for (key in object) {\n    if (_hasOwnProperty$2.call(object, key)) {\n      if (object[key] !== null) return false;\n    }\n  }\n\n  return true;\n}\n\nfunction constructYamlSet(data) {\n  return data !== null ? data : {};\n}\n\nvar set = new type('tag:yaml.org,2002:set', {\n  kind: 'mapping',\n  resolve: resolveYamlSet,\n  construct: constructYamlSet\n});\n\nvar _default = core.extend({\n  implicit: [\n    timestamp,\n    merge\n  ],\n  explicit: [\n    binary,\n    omap,\n    pairs,\n    set\n  ]\n});\n\n/*eslint-disable max-len,no-use-before-define*/\n\n\n\n\n\n\n\nvar _hasOwnProperty$1 = Object.prototype.hasOwnProperty;\n\n\nvar CONTEXT_FLOW_IN   = 1;\nvar CONTEXT_FLOW_OUT  = 2;\nvar CONTEXT_BLOCK_IN  = 3;\nvar CONTEXT_BLOCK_OUT = 4;\n\n\nvar CHOMPING_CLIP  = 1;\nvar CHOMPING_STRIP = 2;\nvar CHOMPING_KEEP  = 3;\n\n\nvar PATTERN_NON_PRINTABLE         = /[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F-\\x84\\x86-\\x9F\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\nvar PATTERN_NON_ASCII_LINE_BREAKS = /[\\x85\\u2028\\u2029]/;\nvar PATTERN_FLOW_INDICATORS       = /[,\\[\\]\\{\\}]/;\nvar PATTERN_TAG_HANDLE            = /^(?:!|!!|![a-z\\-]+!)$/i;\nvar PATTERN_TAG_URI               = /^(?:!|[^,\\[\\]\\{\\}])(?:%[0-9a-f]{2}|[0-9a-z\\-#;\\/\\?:@&=\\+\\$,_\\.!~\\*'\\(\\)\\[\\]])*$/i;\n\n\nfunction _class(obj) { return Object.prototype.toString.call(obj); }\n\nfunction is_EOL(c) {\n  return (c === 0x0A/* LF */) || (c === 0x0D/* CR */);\n}\n\nfunction is_WHITE_SPACE(c) {\n  return (c === 0x09/* Tab */) || (c === 0x20/* Space */);\n}\n\nfunction is_WS_OR_EOL(c) {\n  return (c === 0x09/* Tab */) ||\n         (c === 0x20/* Space */) ||\n         (c === 0x0A/* LF */) ||\n         (c === 0x0D/* CR */);\n}\n\nfunction is_FLOW_INDICATOR(c) {\n  return c === 0x2C/* , */ ||\n         c === 0x5B/* [ */ ||\n         c === 0x5D/* ] */ ||\n         c === 0x7B/* { */ ||\n         c === 0x7D/* } */;\n}\n\nfunction fromHexCode(c) {\n  var lc;\n\n  if ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) {\n    return c - 0x30;\n  }\n\n  /*eslint-disable no-bitwise*/\n  lc = c | 0x20;\n\n  if ((0x61/* a */ <= lc) && (lc <= 0x66/* f */)) {\n    return lc - 0x61 + 10;\n  }\n\n  return -1;\n}\n\nfunction escapedHexLen(c) {\n  if (c === 0x78/* x */) { return 2; }\n  if (c === 0x75/* u */) { return 4; }\n  if (c === 0x55/* U */) { return 8; }\n  return 0;\n}\n\nfunction fromDecimalCode(c) {\n  if ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) {\n    return c - 0x30;\n  }\n\n  return -1;\n}\n\nfunction simpleEscapeSequence(c) {\n  /* eslint-disable indent */\n  return (c === 0x30/* 0 */) ? '\\x00' :\n        (c === 0x61/* a */) ? '\\x07' :\n        (c === 0x62/* b */) ? '\\x08' :\n        (c === 0x74/* t */) ? '\\x09' :\n        (c === 0x09/* Tab */) ? '\\x09' :\n        (c === 0x6E/* n */) ? '\\x0A' :\n        (c === 0x76/* v */) ? '\\x0B' :\n        (c === 0x66/* f */) ? '\\x0C' :\n        (c === 0x72/* r */) ? '\\x0D' :\n        (c === 0x65/* e */) ? '\\x1B' :\n        (c === 0x20/* Space */) ? ' ' :\n        (c === 0x22/* \" */) ? '\\x22' :\n        (c === 0x2F/* / */) ? '/' :\n        (c === 0x5C/* \\ */) ? '\\x5C' :\n        (c === 0x4E/* N */) ? '\\x85' :\n        (c === 0x5F/* _ */) ? '\\xA0' :\n        (c === 0x4C/* L */) ? '\\u2028' :\n        (c === 0x50/* P */) ? '\\u2029' : '';\n}\n\nfunction charFromCodepoint(c) {\n  if (c <= 0xFFFF) {\n    return String.fromCharCode(c);\n  }\n  // Encode UTF-16 surrogate pair\n  // https://en.wikipedia.org/wiki/UTF-16#Code_points_U.2B010000_to_U.2B10FFFF\n  return String.fromCharCode(\n    ((c - 0x010000) >> 10) + 0xD800,\n    ((c - 0x010000) & 0x03FF) + 0xDC00\n  );\n}\n\nvar simpleEscapeCheck = new Array(256); // integer, for fast access\nvar simpleEscapeMap = new Array(256);\nfor (var i = 0; i < 256; i++) {\n  simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;\n  simpleEscapeMap[i] = simpleEscapeSequence(i);\n}\n\n\nfunction State$1(input, options) {\n  this.input = input;\n\n  this.filename  = options['filename']  || null;\n  this.schema    = options['schema']    || _default;\n  this.onWarning = options['onWarning'] || null;\n  // (Hidden) Remove? makes the loader to expect YAML 1.1 documents\n  // if such documents have no explicit %YAML directive\n  this.legacy    = options['legacy']    || false;\n\n  this.json      = options['json']      || false;\n  this.listener  = options['listener']  || null;\n\n  this.implicitTypes = this.schema.compiledImplicit;\n  this.typeMap       = this.schema.compiledTypeMap;\n\n  this.length     = input.length;\n  this.position   = 0;\n  this.line       = 0;\n  this.lineStart  = 0;\n  this.lineIndent = 0;\n\n  // position of first leading tab in the current line,\n  // used to make sure there are no tabs in the indentation\n  this.firstTabInLine = -1;\n\n  this.documents = [];\n\n  /*\n  this.version;\n  this.checkLineBreaks;\n  this.tagMap;\n  this.anchorMap;\n  this.tag;\n  this.anchor;\n  this.kind;\n  this.result;*/\n\n}\n\n\nfunction generateError(state, message) {\n  var mark = {\n    name:     state.filename,\n    buffer:   state.input.slice(0, -1), // omit trailing \\0\n    position: state.position,\n    line:     state.line,\n    column:   state.position - state.lineStart\n  };\n\n  mark.snippet = snippet(mark);\n\n  return new exception(message, mark);\n}\n\nfunction throwError(state, message) {\n  throw generateError(state, message);\n}\n\nfunction throwWarning(state, message) {\n  if (state.onWarning) {\n    state.onWarning.call(null, generateError(state, message));\n  }\n}\n\n\nvar directiveHandlers = {\n\n  YAML: function handleYamlDirective(state, name, args) {\n\n    var match, major, minor;\n\n    if (state.version !== null) {\n      throwError(state, 'duplication of %YAML directive');\n    }\n\n    if (args.length !== 1) {\n      throwError(state, 'YAML directive accepts exactly one argument');\n    }\n\n    match = /^([0-9]+)\\.([0-9]+)$/.exec(args[0]);\n\n    if (match === null) {\n      throwError(state, 'ill-formed argument of the YAML directive');\n    }\n\n    major = parseInt(match[1], 10);\n    minor = parseInt(match[2], 10);\n\n    if (major !== 1) {\n      throwError(state, 'unacceptable YAML version of the document');\n    }\n\n    state.version = args[0];\n    state.checkLineBreaks = (minor < 2);\n\n    if (minor !== 1 && minor !== 2) {\n      throwWarning(state, 'unsupported YAML version of the document');\n    }\n  },\n\n  TAG: function handleTagDirective(state, name, args) {\n\n    var handle, prefix;\n\n    if (args.length !== 2) {\n      throwError(state, 'TAG directive accepts exactly two arguments');\n    }\n\n    handle = args[0];\n    prefix = args[1];\n\n    if (!PATTERN_TAG_HANDLE.test(handle)) {\n      throwError(state, 'ill-formed tag handle (first argument) of the TAG directive');\n    }\n\n    if (_hasOwnProperty$1.call(state.tagMap, handle)) {\n      throwError(state, 'there is a previously declared suffix for \"' + handle + '\" tag handle');\n    }\n\n    if (!PATTERN_TAG_URI.test(prefix)) {\n      throwError(state, 'ill-formed tag prefix (second argument) of the TAG directive');\n    }\n\n    try {\n      prefix = decodeURIComponent(prefix);\n    } catch (err) {\n      throwError(state, 'tag prefix is malformed: ' + prefix);\n    }\n\n    state.tagMap[handle] = prefix;\n  }\n};\n\n\nfunction captureSegment(state, start, end, checkJson) {\n  var _position, _length, _character, _result;\n\n  if (start < end) {\n    _result = state.input.slice(start, end);\n\n    if (checkJson) {\n      for (_position = 0, _length = _result.length; _position < _length; _position += 1) {\n        _character = _result.charCodeAt(_position);\n        if (!(_character === 0x09 ||\n              (0x20 <= _character && _character <= 0x10FFFF))) {\n          throwError(state, 'expected valid JSON character');\n        }\n      }\n    } else if (PATTERN_NON_PRINTABLE.test(_result)) {\n      throwError(state, 'the stream contains non-printable characters');\n    }\n\n    state.result += _result;\n  }\n}\n\nfunction mergeMappings(state, destination, source, overridableKeys) {\n  var sourceKeys, key, index, quantity;\n\n  if (!common.isObject(source)) {\n    throwError(state, 'cannot merge mappings; the provided source object is unacceptable');\n  }\n\n  sourceKeys = Object.keys(source);\n\n  for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {\n    key = sourceKeys[index];\n\n    if (!_hasOwnProperty$1.call(destination, key)) {\n      destination[key] = source[key];\n      overridableKeys[key] = true;\n    }\n  }\n}\n\nfunction storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode,\n  startLine, startLineStart, startPos) {\n\n  var index, quantity;\n\n  // The output is a plain object here, so keys can only be strings.\n  // We need to convert keyNode to a string, but doing so can hang the process\n  // (deeply nested arrays that explode exponentially using aliases).\n  if (Array.isArray(keyNode)) {\n    keyNode = Array.prototype.slice.call(keyNode);\n\n    for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {\n      if (Array.isArray(keyNode[index])) {\n        throwError(state, 'nested arrays are not supported inside keys');\n      }\n\n      if (typeof keyNode === 'object' && _class(keyNode[index]) === '[object Object]') {\n        keyNode[index] = '[object Object]';\n      }\n    }\n  }\n\n  // Avoid code execution in load() via toString property\n  // (still use its own toString for arrays, timestamps,\n  // and whatever user schema extensions happen to have @@toStringTag)\n  if (typeof keyNode === 'object' && _class(keyNode) === '[object Object]') {\n    keyNode = '[object Object]';\n  }\n\n\n  keyNode = String(keyNode);\n\n  if (_result === null) {\n    _result = {};\n  }\n\n  if (keyTag === 'tag:yaml.org,2002:merge') {\n    if (Array.isArray(valueNode)) {\n      for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {\n        mergeMappings(state, _result, valueNode[index], overridableKeys);\n      }\n    } else {\n      mergeMappings(state, _result, valueNode, overridableKeys);\n    }\n  } else {\n    if (!state.json &&\n        !_hasOwnProperty$1.call(overridableKeys, keyNode) &&\n        _hasOwnProperty$1.call(_result, keyNode)) {\n      state.line = startLine || state.line;\n      state.lineStart = startLineStart || state.lineStart;\n      state.position = startPos || state.position;\n      throwError(state, 'duplicated mapping key');\n    }\n\n    // used for this specific key only because Object.defineProperty is slow\n    if (keyNode === '__proto__') {\n      Object.defineProperty(_result, keyNode, {\n        configurable: true,\n        enumerable: true,\n        writable: true,\n        value: valueNode\n      });\n    } else {\n      _result[keyNode] = valueNode;\n    }\n    delete overridableKeys[keyNode];\n  }\n\n  return _result;\n}\n\nfunction readLineBreak(state) {\n  var ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch === 0x0A/* LF */) {\n    state.position++;\n  } else if (ch === 0x0D/* CR */) {\n    state.position++;\n    if (state.input.charCodeAt(state.position) === 0x0A/* LF */) {\n      state.position++;\n    }\n  } else {\n    throwError(state, 'a line break is expected');\n  }\n\n  state.line += 1;\n  state.lineStart = state.position;\n  state.firstTabInLine = -1;\n}\n\nfunction skipSeparationSpace(state, allowComments, checkIndent) {\n  var lineBreaks = 0,\n      ch = state.input.charCodeAt(state.position);\n\n  while (ch !== 0) {\n    while (is_WHITE_SPACE(ch)) {\n      if (ch === 0x09/* Tab */ && state.firstTabInLine === -1) {\n        state.firstTabInLine = state.position;\n      }\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    if (allowComments && ch === 0x23/* # */) {\n      do {\n        ch = state.input.charCodeAt(++state.position);\n      } while (ch !== 0x0A/* LF */ && ch !== 0x0D/* CR */ && ch !== 0);\n    }\n\n    if (is_EOL(ch)) {\n      readLineBreak(state);\n\n      ch = state.input.charCodeAt(state.position);\n      lineBreaks++;\n      state.lineIndent = 0;\n\n      while (ch === 0x20/* Space */) {\n        state.lineIndent++;\n        ch = state.input.charCodeAt(++state.position);\n      }\n    } else {\n      break;\n    }\n  }\n\n  if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {\n    throwWarning(state, 'deficient indentation');\n  }\n\n  return lineBreaks;\n}\n\nfunction testDocumentSeparator(state) {\n  var _position = state.position,\n      ch;\n\n  ch = state.input.charCodeAt(_position);\n\n  // Condition state.position === state.lineStart is tested\n  // in parent on each call, for efficiency. No needs to test here again.\n  if ((ch === 0x2D/* - */ || ch === 0x2E/* . */) &&\n      ch === state.input.charCodeAt(_position + 1) &&\n      ch === state.input.charCodeAt(_position + 2)) {\n\n    _position += 3;\n\n    ch = state.input.charCodeAt(_position);\n\n    if (ch === 0 || is_WS_OR_EOL(ch)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction writeFoldedLines(state, count) {\n  if (count === 1) {\n    state.result += ' ';\n  } else if (count > 1) {\n    state.result += common.repeat('\\n', count - 1);\n  }\n}\n\n\nfunction readPlainScalar(state, nodeIndent, withinFlowCollection) {\n  var preceding,\n      following,\n      captureStart,\n      captureEnd,\n      hasPendingContent,\n      _line,\n      _lineStart,\n      _lineIndent,\n      _kind = state.kind,\n      _result = state.result,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (is_WS_OR_EOL(ch)      ||\n      is_FLOW_INDICATOR(ch) ||\n      ch === 0x23/* # */    ||\n      ch === 0x26/* & */    ||\n      ch === 0x2A/* * */    ||\n      ch === 0x21/* ! */    ||\n      ch === 0x7C/* | */    ||\n      ch === 0x3E/* > */    ||\n      ch === 0x27/* ' */    ||\n      ch === 0x22/* \" */    ||\n      ch === 0x25/* % */    ||\n      ch === 0x40/* @ */    ||\n      ch === 0x60/* ` */) {\n    return false;\n  }\n\n  if (ch === 0x3F/* ? */ || ch === 0x2D/* - */) {\n    following = state.input.charCodeAt(state.position + 1);\n\n    if (is_WS_OR_EOL(following) ||\n        withinFlowCollection && is_FLOW_INDICATOR(following)) {\n      return false;\n    }\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n  captureStart = captureEnd = state.position;\n  hasPendingContent = false;\n\n  while (ch !== 0) {\n    if (ch === 0x3A/* : */) {\n      following = state.input.charCodeAt(state.position + 1);\n\n      if (is_WS_OR_EOL(following) ||\n          withinFlowCollection && is_FLOW_INDICATOR(following)) {\n        break;\n      }\n\n    } else if (ch === 0x23/* # */) {\n      preceding = state.input.charCodeAt(state.position - 1);\n\n      if (is_WS_OR_EOL(preceding)) {\n        break;\n      }\n\n    } else if ((state.position === state.lineStart && testDocumentSeparator(state)) ||\n               withinFlowCollection && is_FLOW_INDICATOR(ch)) {\n      break;\n\n    } else if (is_EOL(ch)) {\n      _line = state.line;\n      _lineStart = state.lineStart;\n      _lineIndent = state.lineIndent;\n      skipSeparationSpace(state, false, -1);\n\n      if (state.lineIndent >= nodeIndent) {\n        hasPendingContent = true;\n        ch = state.input.charCodeAt(state.position);\n        continue;\n      } else {\n        state.position = captureEnd;\n        state.line = _line;\n        state.lineStart = _lineStart;\n        state.lineIndent = _lineIndent;\n        break;\n      }\n    }\n\n    if (hasPendingContent) {\n      captureSegment(state, captureStart, captureEnd, false);\n      writeFoldedLines(state, state.line - _line);\n      captureStart = captureEnd = state.position;\n      hasPendingContent = false;\n    }\n\n    if (!is_WHITE_SPACE(ch)) {\n      captureEnd = state.position + 1;\n    }\n\n    ch = state.input.charCodeAt(++state.position);\n  }\n\n  captureSegment(state, captureStart, captureEnd, false);\n\n  if (state.result) {\n    return true;\n  }\n\n  state.kind = _kind;\n  state.result = _result;\n  return false;\n}\n\nfunction readSingleQuotedScalar(state, nodeIndent) {\n  var ch,\n      captureStart, captureEnd;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x27/* ' */) {\n    return false;\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n  state.position++;\n  captureStart = captureEnd = state.position;\n\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    if (ch === 0x27/* ' */) {\n      captureSegment(state, captureStart, state.position, true);\n      ch = state.input.charCodeAt(++state.position);\n\n      if (ch === 0x27/* ' */) {\n        captureStart = state.position;\n        state.position++;\n        captureEnd = state.position;\n      } else {\n        return true;\n      }\n\n    } else if (is_EOL(ch)) {\n      captureSegment(state, captureStart, captureEnd, true);\n      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));\n      captureStart = captureEnd = state.position;\n\n    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n      throwError(state, 'unexpected end of the document within a single quoted scalar');\n\n    } else {\n      state.position++;\n      captureEnd = state.position;\n    }\n  }\n\n  throwError(state, 'unexpected end of the stream within a single quoted scalar');\n}\n\nfunction readDoubleQuotedScalar(state, nodeIndent) {\n  var captureStart,\n      captureEnd,\n      hexLength,\n      hexResult,\n      tmp,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x22/* \" */) {\n    return false;\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n  state.position++;\n  captureStart = captureEnd = state.position;\n\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    if (ch === 0x22/* \" */) {\n      captureSegment(state, captureStart, state.position, true);\n      state.position++;\n      return true;\n\n    } else if (ch === 0x5C/* \\ */) {\n      captureSegment(state, captureStart, state.position, true);\n      ch = state.input.charCodeAt(++state.position);\n\n      if (is_EOL(ch)) {\n        skipSeparationSpace(state, false, nodeIndent);\n\n        // TODO: rework to inline fn with no type cast?\n      } else if (ch < 256 && simpleEscapeCheck[ch]) {\n        state.result += simpleEscapeMap[ch];\n        state.position++;\n\n      } else if ((tmp = escapedHexLen(ch)) > 0) {\n        hexLength = tmp;\n        hexResult = 0;\n\n        for (; hexLength > 0; hexLength--) {\n          ch = state.input.charCodeAt(++state.position);\n\n          if ((tmp = fromHexCode(ch)) >= 0) {\n            hexResult = (hexResult << 4) + tmp;\n\n          } else {\n            throwError(state, 'expected hexadecimal character');\n          }\n        }\n\n        state.result += charFromCodepoint(hexResult);\n\n        state.position++;\n\n      } else {\n        throwError(state, 'unknown escape sequence');\n      }\n\n      captureStart = captureEnd = state.position;\n\n    } else if (is_EOL(ch)) {\n      captureSegment(state, captureStart, captureEnd, true);\n      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));\n      captureStart = captureEnd = state.position;\n\n    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n      throwError(state, 'unexpected end of the document within a double quoted scalar');\n\n    } else {\n      state.position++;\n      captureEnd = state.position;\n    }\n  }\n\n  throwError(state, 'unexpected end of the stream within a double quoted scalar');\n}\n\nfunction readFlowCollection(state, nodeIndent) {\n  var readNext = true,\n      _line,\n      _lineStart,\n      _pos,\n      _tag     = state.tag,\n      _result,\n      _anchor  = state.anchor,\n      following,\n      terminator,\n      isPair,\n      isExplicitPair,\n      isMapping,\n      overridableKeys = Object.create(null),\n      keyNode,\n      keyTag,\n      valueNode,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch === 0x5B/* [ */) {\n    terminator = 0x5D;/* ] */\n    isMapping = false;\n    _result = [];\n  } else if (ch === 0x7B/* { */) {\n    terminator = 0x7D;/* } */\n    isMapping = true;\n    _result = {};\n  } else {\n    return false;\n  }\n\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n\n  ch = state.input.charCodeAt(++state.position);\n\n  while (ch !== 0) {\n    skipSeparationSpace(state, true, nodeIndent);\n\n    ch = state.input.charCodeAt(state.position);\n\n    if (ch === terminator) {\n      state.position++;\n      state.tag = _tag;\n      state.anchor = _anchor;\n      state.kind = isMapping ? 'mapping' : 'sequence';\n      state.result = _result;\n      return true;\n    } else if (!readNext) {\n      throwError(state, 'missed comma between flow collection entries');\n    } else if (ch === 0x2C/* , */) {\n      // \"flow collection entries can never be completely empty\", as per YAML 1.2, section 7.4\n      throwError(state, \"expected the node content, but found ','\");\n    }\n\n    keyTag = keyNode = valueNode = null;\n    isPair = isExplicitPair = false;\n\n    if (ch === 0x3F/* ? */) {\n      following = state.input.charCodeAt(state.position + 1);\n\n      if (is_WS_OR_EOL(following)) {\n        isPair = isExplicitPair = true;\n        state.position++;\n        skipSeparationSpace(state, true, nodeIndent);\n      }\n    }\n\n    _line = state.line; // Save the current line.\n    _lineStart = state.lineStart;\n    _pos = state.position;\n    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);\n    keyTag = state.tag;\n    keyNode = state.result;\n    skipSeparationSpace(state, true, nodeIndent);\n\n    ch = state.input.charCodeAt(state.position);\n\n    if ((isExplicitPair || state.line === _line) && ch === 0x3A/* : */) {\n      isPair = true;\n      ch = state.input.charCodeAt(++state.position);\n      skipSeparationSpace(state, true, nodeIndent);\n      composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);\n      valueNode = state.result;\n    }\n\n    if (isMapping) {\n      storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos);\n    } else if (isPair) {\n      _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos));\n    } else {\n      _result.push(keyNode);\n    }\n\n    skipSeparationSpace(state, true, nodeIndent);\n\n    ch = state.input.charCodeAt(state.position);\n\n    if (ch === 0x2C/* , */) {\n      readNext = true;\n      ch = state.input.charCodeAt(++state.position);\n    } else {\n      readNext = false;\n    }\n  }\n\n  throwError(state, 'unexpected end of the stream within a flow collection');\n}\n\nfunction readBlockScalar(state, nodeIndent) {\n  var captureStart,\n      folding,\n      chomping       = CHOMPING_CLIP,\n      didReadContent = false,\n      detectedIndent = false,\n      textIndent     = nodeIndent,\n      emptyLines     = 0,\n      atMoreIndented = false,\n      tmp,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch === 0x7C/* | */) {\n    folding = false;\n  } else if (ch === 0x3E/* > */) {\n    folding = true;\n  } else {\n    return false;\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n\n  while (ch !== 0) {\n    ch = state.input.charCodeAt(++state.position);\n\n    if (ch === 0x2B/* + */ || ch === 0x2D/* - */) {\n      if (CHOMPING_CLIP === chomping) {\n        chomping = (ch === 0x2B/* + */) ? CHOMPING_KEEP : CHOMPING_STRIP;\n      } else {\n        throwError(state, 'repeat of a chomping mode identifier');\n      }\n\n    } else if ((tmp = fromDecimalCode(ch)) >= 0) {\n      if (tmp === 0) {\n        throwError(state, 'bad explicit indentation width of a block scalar; it cannot be less than one');\n      } else if (!detectedIndent) {\n        textIndent = nodeIndent + tmp - 1;\n        detectedIndent = true;\n      } else {\n        throwError(state, 'repeat of an indentation width identifier');\n      }\n\n    } else {\n      break;\n    }\n  }\n\n  if (is_WHITE_SPACE(ch)) {\n    do { ch = state.input.charCodeAt(++state.position); }\n    while (is_WHITE_SPACE(ch));\n\n    if (ch === 0x23/* # */) {\n      do { ch = state.input.charCodeAt(++state.position); }\n      while (!is_EOL(ch) && (ch !== 0));\n    }\n  }\n\n  while (ch !== 0) {\n    readLineBreak(state);\n    state.lineIndent = 0;\n\n    ch = state.input.charCodeAt(state.position);\n\n    while ((!detectedIndent || state.lineIndent < textIndent) &&\n           (ch === 0x20/* Space */)) {\n      state.lineIndent++;\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    if (!detectedIndent && state.lineIndent > textIndent) {\n      textIndent = state.lineIndent;\n    }\n\n    if (is_EOL(ch)) {\n      emptyLines++;\n      continue;\n    }\n\n    // End of the scalar.\n    if (state.lineIndent < textIndent) {\n\n      // Perform the chomping.\n      if (chomping === CHOMPING_KEEP) {\n        state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines);\n      } else if (chomping === CHOMPING_CLIP) {\n        if (didReadContent) { // i.e. only if the scalar is not empty.\n          state.result += '\\n';\n        }\n      }\n\n      // Break this `while` cycle and go to the funciton's epilogue.\n      break;\n    }\n\n    // Folded style: use fancy rules to handle line breaks.\n    if (folding) {\n\n      // Lines starting with white space characters (more-indented lines) are not folded.\n      if (is_WHITE_SPACE(ch)) {\n        atMoreIndented = true;\n        // except for the first content line (cf. Example 8.1)\n        state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines);\n\n      // End of more-indented block.\n      } else if (atMoreIndented) {\n        atMoreIndented = false;\n        state.result += common.repeat('\\n', emptyLines + 1);\n\n      // Just one line break - perceive as the same line.\n      } else if (emptyLines === 0) {\n        if (didReadContent) { // i.e. only if we have already read some scalar content.\n          state.result += ' ';\n        }\n\n      // Several line breaks - perceive as different lines.\n      } else {\n        state.result += common.repeat('\\n', emptyLines);\n      }\n\n    // Literal style: just add exact number of line breaks between content lines.\n    } else {\n      // Keep all line breaks except the header line break.\n      state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines);\n    }\n\n    didReadContent = true;\n    detectedIndent = true;\n    emptyLines = 0;\n    captureStart = state.position;\n\n    while (!is_EOL(ch) && (ch !== 0)) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    captureSegment(state, captureStart, state.position, false);\n  }\n\n  return true;\n}\n\nfunction readBlockSequence(state, nodeIndent) {\n  var _line,\n      _tag      = state.tag,\n      _anchor   = state.anchor,\n      _result   = [],\n      following,\n      detected  = false,\n      ch;\n\n  // there is a leading tab before this token, so it can't be a block sequence/mapping;\n  // it can still be flow sequence/mapping or a scalar\n  if (state.firstTabInLine !== -1) return false;\n\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n\n  ch = state.input.charCodeAt(state.position);\n\n  while (ch !== 0) {\n    if (state.firstTabInLine !== -1) {\n      state.position = state.firstTabInLine;\n      throwError(state, 'tab characters must not be used in indentation');\n    }\n\n    if (ch !== 0x2D/* - */) {\n      break;\n    }\n\n    following = state.input.charCodeAt(state.position + 1);\n\n    if (!is_WS_OR_EOL(following)) {\n      break;\n    }\n\n    detected = true;\n    state.position++;\n\n    if (skipSeparationSpace(state, true, -1)) {\n      if (state.lineIndent <= nodeIndent) {\n        _result.push(null);\n        ch = state.input.charCodeAt(state.position);\n        continue;\n      }\n    }\n\n    _line = state.line;\n    composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);\n    _result.push(state.result);\n    skipSeparationSpace(state, true, -1);\n\n    ch = state.input.charCodeAt(state.position);\n\n    if ((state.line === _line || state.lineIndent > nodeIndent) && (ch !== 0)) {\n      throwError(state, 'bad indentation of a sequence entry');\n    } else if (state.lineIndent < nodeIndent) {\n      break;\n    }\n  }\n\n  if (detected) {\n    state.tag = _tag;\n    state.anchor = _anchor;\n    state.kind = 'sequence';\n    state.result = _result;\n    return true;\n  }\n  return false;\n}\n\nfunction readBlockMapping(state, nodeIndent, flowIndent) {\n  var following,\n      allowCompact,\n      _line,\n      _keyLine,\n      _keyLineStart,\n      _keyPos,\n      _tag          = state.tag,\n      _anchor       = state.anchor,\n      _result       = {},\n      overridableKeys = Object.create(null),\n      keyTag        = null,\n      keyNode       = null,\n      valueNode     = null,\n      atExplicitKey = false,\n      detected      = false,\n      ch;\n\n  // there is a leading tab before this token, so it can't be a block sequence/mapping;\n  // it can still be flow sequence/mapping or a scalar\n  if (state.firstTabInLine !== -1) return false;\n\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n\n  ch = state.input.charCodeAt(state.position);\n\n  while (ch !== 0) {\n    if (!atExplicitKey && state.firstTabInLine !== -1) {\n      state.position = state.firstTabInLine;\n      throwError(state, 'tab characters must not be used in indentation');\n    }\n\n    following = state.input.charCodeAt(state.position + 1);\n    _line = state.line; // Save the current line.\n\n    //\n    // Explicit notation case. There are two separate blocks:\n    // first for the key (denoted by \"?\") and second for the value (denoted by \":\")\n    //\n    if ((ch === 0x3F/* ? */ || ch === 0x3A/* : */) && is_WS_OR_EOL(following)) {\n\n      if (ch === 0x3F/* ? */) {\n        if (atExplicitKey) {\n          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);\n          keyTag = keyNode = valueNode = null;\n        }\n\n        detected = true;\n        atExplicitKey = true;\n        allowCompact = true;\n\n      } else if (atExplicitKey) {\n        // i.e. 0x3A/* : */ === character after the explicit key.\n        atExplicitKey = false;\n        allowCompact = true;\n\n      } else {\n        throwError(state, 'incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line');\n      }\n\n      state.position += 1;\n      ch = following;\n\n    //\n    // Implicit notation case. Flow-style node as the key first, then \":\", and the value.\n    //\n    } else {\n      _keyLine = state.line;\n      _keyLineStart = state.lineStart;\n      _keyPos = state.position;\n\n      if (!composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {\n        // Neither implicit nor explicit notation.\n        // Reading is done. Go to the epilogue.\n        break;\n      }\n\n      if (state.line === _line) {\n        ch = state.input.charCodeAt(state.position);\n\n        while (is_WHITE_SPACE(ch)) {\n          ch = state.input.charCodeAt(++state.position);\n        }\n\n        if (ch === 0x3A/* : */) {\n          ch = state.input.charCodeAt(++state.position);\n\n          if (!is_WS_OR_EOL(ch)) {\n            throwError(state, 'a whitespace character is expected after the key-value separator within a block mapping');\n          }\n\n          if (atExplicitKey) {\n            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);\n            keyTag = keyNode = valueNode = null;\n          }\n\n          detected = true;\n          atExplicitKey = false;\n          allowCompact = false;\n          keyTag = state.tag;\n          keyNode = state.result;\n\n        } else if (detected) {\n          throwError(state, 'can not read an implicit mapping pair; a colon is missed');\n\n        } else {\n          state.tag = _tag;\n          state.anchor = _anchor;\n          return true; // Keep the result of `composeNode`.\n        }\n\n      } else if (detected) {\n        throwError(state, 'can not read a block mapping entry; a multiline key may not be an implicit key');\n\n      } else {\n        state.tag = _tag;\n        state.anchor = _anchor;\n        return true; // Keep the result of `composeNode`.\n      }\n    }\n\n    //\n    // Common reading code for both explicit and implicit notations.\n    //\n    if (state.line === _line || state.lineIndent > nodeIndent) {\n      if (atExplicitKey) {\n        _keyLine = state.line;\n        _keyLineStart = state.lineStart;\n        _keyPos = state.position;\n      }\n\n      if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {\n        if (atExplicitKey) {\n          keyNode = state.result;\n        } else {\n          valueNode = state.result;\n        }\n      }\n\n      if (!atExplicitKey) {\n        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _keyLine, _keyLineStart, _keyPos);\n        keyTag = keyNode = valueNode = null;\n      }\n\n      skipSeparationSpace(state, true, -1);\n      ch = state.input.charCodeAt(state.position);\n    }\n\n    if ((state.line === _line || state.lineIndent > nodeIndent) && (ch !== 0)) {\n      throwError(state, 'bad indentation of a mapping entry');\n    } else if (state.lineIndent < nodeIndent) {\n      break;\n    }\n  }\n\n  //\n  // Epilogue.\n  //\n\n  // Special case: last mapping's node contains only the key in explicit notation.\n  if (atExplicitKey) {\n    storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);\n  }\n\n  // Expose the resulting mapping.\n  if (detected) {\n    state.tag = _tag;\n    state.anchor = _anchor;\n    state.kind = 'mapping';\n    state.result = _result;\n  }\n\n  return detected;\n}\n\nfunction readTagProperty(state) {\n  var _position,\n      isVerbatim = false,\n      isNamed    = false,\n      tagHandle,\n      tagName,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x21/* ! */) return false;\n\n  if (state.tag !== null) {\n    throwError(state, 'duplication of a tag property');\n  }\n\n  ch = state.input.charCodeAt(++state.position);\n\n  if (ch === 0x3C/* < */) {\n    isVerbatim = true;\n    ch = state.input.charCodeAt(++state.position);\n\n  } else if (ch === 0x21/* ! */) {\n    isNamed = true;\n    tagHandle = '!!';\n    ch = state.input.charCodeAt(++state.position);\n\n  } else {\n    tagHandle = '!';\n  }\n\n  _position = state.position;\n\n  if (isVerbatim) {\n    do { ch = state.input.charCodeAt(++state.position); }\n    while (ch !== 0 && ch !== 0x3E/* > */);\n\n    if (state.position < state.length) {\n      tagName = state.input.slice(_position, state.position);\n      ch = state.input.charCodeAt(++state.position);\n    } else {\n      throwError(state, 'unexpected end of the stream within a verbatim tag');\n    }\n  } else {\n    while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n\n      if (ch === 0x21/* ! */) {\n        if (!isNamed) {\n          tagHandle = state.input.slice(_position - 1, state.position + 1);\n\n          if (!PATTERN_TAG_HANDLE.test(tagHandle)) {\n            throwError(state, 'named tag handle cannot contain such characters');\n          }\n\n          isNamed = true;\n          _position = state.position + 1;\n        } else {\n          throwError(state, 'tag suffix cannot contain exclamation marks');\n        }\n      }\n\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    tagName = state.input.slice(_position, state.position);\n\n    if (PATTERN_FLOW_INDICATORS.test(tagName)) {\n      throwError(state, 'tag suffix cannot contain flow indicator characters');\n    }\n  }\n\n  if (tagName && !PATTERN_TAG_URI.test(tagName)) {\n    throwError(state, 'tag name cannot contain such characters: ' + tagName);\n  }\n\n  try {\n    tagName = decodeURIComponent(tagName);\n  } catch (err) {\n    throwError(state, 'tag name is malformed: ' + tagName);\n  }\n\n  if (isVerbatim) {\n    state.tag = tagName;\n\n  } else if (_hasOwnProperty$1.call(state.tagMap, tagHandle)) {\n    state.tag = state.tagMap[tagHandle] + tagName;\n\n  } else if (tagHandle === '!') {\n    state.tag = '!' + tagName;\n\n  } else if (tagHandle === '!!') {\n    state.tag = 'tag:yaml.org,2002:' + tagName;\n\n  } else {\n    throwError(state, 'undeclared tag handle \"' + tagHandle + '\"');\n  }\n\n  return true;\n}\n\nfunction readAnchorProperty(state) {\n  var _position,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x26/* & */) return false;\n\n  if (state.anchor !== null) {\n    throwError(state, 'duplication of an anchor property');\n  }\n\n  ch = state.input.charCodeAt(++state.position);\n  _position = state.position;\n\n  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {\n    ch = state.input.charCodeAt(++state.position);\n  }\n\n  if (state.position === _position) {\n    throwError(state, 'name of an anchor node must contain at least one character');\n  }\n\n  state.anchor = state.input.slice(_position, state.position);\n  return true;\n}\n\nfunction readAlias(state) {\n  var _position, alias,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x2A/* * */) return false;\n\n  ch = state.input.charCodeAt(++state.position);\n  _position = state.position;\n\n  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {\n    ch = state.input.charCodeAt(++state.position);\n  }\n\n  if (state.position === _position) {\n    throwError(state, 'name of an alias node must contain at least one character');\n  }\n\n  alias = state.input.slice(_position, state.position);\n\n  if (!_hasOwnProperty$1.call(state.anchorMap, alias)) {\n    throwError(state, 'unidentified alias \"' + alias + '\"');\n  }\n\n  state.result = state.anchorMap[alias];\n  skipSeparationSpace(state, true, -1);\n  return true;\n}\n\nfunction composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {\n  var allowBlockStyles,\n      allowBlockScalars,\n      allowBlockCollections,\n      indentStatus = 1, // 1: this>parent, 0: this=parent, -1: this<parent\n      atNewLine  = false,\n      hasContent = false,\n      typeIndex,\n      typeQuantity,\n      typeList,\n      type,\n      flowIndent,\n      blockIndent;\n\n  if (state.listener !== null) {\n    state.listener('open', state);\n  }\n\n  state.tag    = null;\n  state.anchor = null;\n  state.kind   = null;\n  state.result = null;\n\n  allowBlockStyles = allowBlockScalars = allowBlockCollections =\n    CONTEXT_BLOCK_OUT === nodeContext ||\n    CONTEXT_BLOCK_IN  === nodeContext;\n\n  if (allowToSeek) {\n    if (skipSeparationSpace(state, true, -1)) {\n      atNewLine = true;\n\n      if (state.lineIndent > parentIndent) {\n        indentStatus = 1;\n      } else if (state.lineIndent === parentIndent) {\n        indentStatus = 0;\n      } else if (state.lineIndent < parentIndent) {\n        indentStatus = -1;\n      }\n    }\n  }\n\n  if (indentStatus === 1) {\n    while (readTagProperty(state) || readAnchorProperty(state)) {\n      if (skipSeparationSpace(state, true, -1)) {\n        atNewLine = true;\n        allowBlockCollections = allowBlockStyles;\n\n        if (state.lineIndent > parentIndent) {\n          indentStatus = 1;\n        } else if (state.lineIndent === parentIndent) {\n          indentStatus = 0;\n        } else if (state.lineIndent < parentIndent) {\n          indentStatus = -1;\n        }\n      } else {\n        allowBlockCollections = false;\n      }\n    }\n  }\n\n  if (allowBlockCollections) {\n    allowBlockCollections = atNewLine || allowCompact;\n  }\n\n  if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {\n    if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {\n      flowIndent = parentIndent;\n    } else {\n      flowIndent = parentIndent + 1;\n    }\n\n    blockIndent = state.position - state.lineStart;\n\n    if (indentStatus === 1) {\n      if (allowBlockCollections &&\n          (readBlockSequence(state, blockIndent) ||\n           readBlockMapping(state, blockIndent, flowIndent)) ||\n          readFlowCollection(state, flowIndent)) {\n        hasContent = true;\n      } else {\n        if ((allowBlockScalars && readBlockScalar(state, flowIndent)) ||\n            readSingleQuotedScalar(state, flowIndent) ||\n            readDoubleQuotedScalar(state, flowIndent)) {\n          hasContent = true;\n\n        } else if (readAlias(state)) {\n          hasContent = true;\n\n          if (state.tag !== null || state.anchor !== null) {\n            throwError(state, 'alias node should not have any properties');\n          }\n\n        } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {\n          hasContent = true;\n\n          if (state.tag === null) {\n            state.tag = '?';\n          }\n        }\n\n        if (state.anchor !== null) {\n          state.anchorMap[state.anchor] = state.result;\n        }\n      }\n    } else if (indentStatus === 0) {\n      // Special case: block sequences are allowed to have same indentation level as the parent.\n      // http://www.yaml.org/spec/1.2/spec.html#id2799784\n      hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);\n    }\n  }\n\n  if (state.tag === null) {\n    if (state.anchor !== null) {\n      state.anchorMap[state.anchor] = state.result;\n    }\n\n  } else if (state.tag === '?') {\n    // Implicit resolving is not allowed for non-scalar types, and '?'\n    // non-specific tag is only automatically assigned to plain scalars.\n    //\n    // We only need to check kind conformity in case user explicitly assigns '?'\n    // tag, for example like this: \"!<?> [0]\"\n    //\n    if (state.result !== null && state.kind !== 'scalar') {\n      throwError(state, 'unacceptable node kind for !<?> tag; it should be \"scalar\", not \"' + state.kind + '\"');\n    }\n\n    for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {\n      type = state.implicitTypes[typeIndex];\n\n      if (type.resolve(state.result)) { // `state.result` updated in resolver if matched\n        state.result = type.construct(state.result);\n        state.tag = type.tag;\n        if (state.anchor !== null) {\n          state.anchorMap[state.anchor] = state.result;\n        }\n        break;\n      }\n    }\n  } else if (state.tag !== '!') {\n    if (_hasOwnProperty$1.call(state.typeMap[state.kind || 'fallback'], state.tag)) {\n      type = state.typeMap[state.kind || 'fallback'][state.tag];\n    } else {\n      // looking for multi type\n      type = null;\n      typeList = state.typeMap.multi[state.kind || 'fallback'];\n\n      for (typeIndex = 0, typeQuantity = typeList.length; typeIndex < typeQuantity; typeIndex += 1) {\n        if (state.tag.slice(0, typeList[typeIndex].tag.length) === typeList[typeIndex].tag) {\n          type = typeList[typeIndex];\n          break;\n        }\n      }\n    }\n\n    if (!type) {\n      throwError(state, 'unknown tag !<' + state.tag + '>');\n    }\n\n    if (state.result !== null && type.kind !== state.kind) {\n      throwError(state, 'unacceptable node kind for !<' + state.tag + '> tag; it should be \"' + type.kind + '\", not \"' + state.kind + '\"');\n    }\n\n    if (!type.resolve(state.result, state.tag)) { // `state.result` updated in resolver if matched\n      throwError(state, 'cannot resolve a node with !<' + state.tag + '> explicit tag');\n    } else {\n      state.result = type.construct(state.result, state.tag);\n      if (state.anchor !== null) {\n        state.anchorMap[state.anchor] = state.result;\n      }\n    }\n  }\n\n  if (state.listener !== null) {\n    state.listener('close', state);\n  }\n  return state.tag !== null ||  state.anchor !== null || hasContent;\n}\n\nfunction readDocument(state) {\n  var documentStart = state.position,\n      _position,\n      directiveName,\n      directiveArgs,\n      hasDirectives = false,\n      ch;\n\n  state.version = null;\n  state.checkLineBreaks = state.legacy;\n  state.tagMap = Object.create(null);\n  state.anchorMap = Object.create(null);\n\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    skipSeparationSpace(state, true, -1);\n\n    ch = state.input.charCodeAt(state.position);\n\n    if (state.lineIndent > 0 || ch !== 0x25/* % */) {\n      break;\n    }\n\n    hasDirectives = true;\n    ch = state.input.charCodeAt(++state.position);\n    _position = state.position;\n\n    while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    directiveName = state.input.slice(_position, state.position);\n    directiveArgs = [];\n\n    if (directiveName.length < 1) {\n      throwError(state, 'directive name must not be less than one character in length');\n    }\n\n    while (ch !== 0) {\n      while (is_WHITE_SPACE(ch)) {\n        ch = state.input.charCodeAt(++state.position);\n      }\n\n      if (ch === 0x23/* # */) {\n        do { ch = state.input.charCodeAt(++state.position); }\n        while (ch !== 0 && !is_EOL(ch));\n        break;\n      }\n\n      if (is_EOL(ch)) break;\n\n      _position = state.position;\n\n      while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n        ch = state.input.charCodeAt(++state.position);\n      }\n\n      directiveArgs.push(state.input.slice(_position, state.position));\n    }\n\n    if (ch !== 0) readLineBreak(state);\n\n    if (_hasOwnProperty$1.call(directiveHandlers, directiveName)) {\n      directiveHandlers[directiveName](state, directiveName, directiveArgs);\n    } else {\n      throwWarning(state, 'unknown document directive \"' + directiveName + '\"');\n    }\n  }\n\n  skipSeparationSpace(state, true, -1);\n\n  if (state.lineIndent === 0 &&\n      state.input.charCodeAt(state.position)     === 0x2D/* - */ &&\n      state.input.charCodeAt(state.position + 1) === 0x2D/* - */ &&\n      state.input.charCodeAt(state.position + 2) === 0x2D/* - */) {\n    state.position += 3;\n    skipSeparationSpace(state, true, -1);\n\n  } else if (hasDirectives) {\n    throwError(state, 'directives end mark is expected');\n  }\n\n  composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);\n  skipSeparationSpace(state, true, -1);\n\n  if (state.checkLineBreaks &&\n      PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {\n    throwWarning(state, 'non-ASCII line breaks are interpreted as content');\n  }\n\n  state.documents.push(state.result);\n\n  if (state.position === state.lineStart && testDocumentSeparator(state)) {\n\n    if (state.input.charCodeAt(state.position) === 0x2E/* . */) {\n      state.position += 3;\n      skipSeparationSpace(state, true, -1);\n    }\n    return;\n  }\n\n  if (state.position < (state.length - 1)) {\n    throwError(state, 'end of the stream or a document separator is expected');\n  } else {\n    return;\n  }\n}\n\n\nfunction loadDocuments(input, options) {\n  input = String(input);\n  options = options || {};\n\n  if (input.length !== 0) {\n\n    // Add tailing `\\n` if not exists\n    if (input.charCodeAt(input.length - 1) !== 0x0A/* LF */ &&\n        input.charCodeAt(input.length - 1) !== 0x0D/* CR */) {\n      input += '\\n';\n    }\n\n    // Strip BOM\n    if (input.charCodeAt(0) === 0xFEFF) {\n      input = input.slice(1);\n    }\n  }\n\n  var state = new State$1(input, options);\n\n  var nullpos = input.indexOf('\\0');\n\n  if (nullpos !== -1) {\n    state.position = nullpos;\n    throwError(state, 'null byte is not allowed in input');\n  }\n\n  // Use 0 as string terminator. That significantly simplifies bounds check.\n  state.input += '\\0';\n\n  while (state.input.charCodeAt(state.position) === 0x20/* Space */) {\n    state.lineIndent += 1;\n    state.position += 1;\n  }\n\n  while (state.position < (state.length - 1)) {\n    readDocument(state);\n  }\n\n  return state.documents;\n}\n\n\nfunction loadAll$1(input, iterator, options) {\n  if (iterator !== null && typeof iterator === 'object' && typeof options === 'undefined') {\n    options = iterator;\n    iterator = null;\n  }\n\n  var documents = loadDocuments(input, options);\n\n  if (typeof iterator !== 'function') {\n    return documents;\n  }\n\n  for (var index = 0, length = documents.length; index < length; index += 1) {\n    iterator(documents[index]);\n  }\n}\n\n\nfunction load$1(input, options) {\n  var documents = loadDocuments(input, options);\n\n  if (documents.length === 0) {\n    /*eslint-disable no-undefined*/\n    return undefined;\n  } else if (documents.length === 1) {\n    return documents[0];\n  }\n  throw new exception('expected a single document in the stream, but found more');\n}\n\n\nvar loadAll_1 = loadAll$1;\nvar load_1    = load$1;\n\nvar loader = {\n\tloadAll: loadAll_1,\n\tload: load_1\n};\n\n/*eslint-disable no-use-before-define*/\n\n\n\n\n\nvar _toString       = Object.prototype.toString;\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar CHAR_BOM                  = 0xFEFF;\nvar CHAR_TAB                  = 0x09; /* Tab */\nvar CHAR_LINE_FEED            = 0x0A; /* LF */\nvar CHAR_CARRIAGE_RETURN      = 0x0D; /* CR */\nvar CHAR_SPACE                = 0x20; /* Space */\nvar CHAR_EXCLAMATION          = 0x21; /* ! */\nvar CHAR_DOUBLE_QUOTE         = 0x22; /* \" */\nvar CHAR_SHARP                = 0x23; /* # */\nvar CHAR_PERCENT              = 0x25; /* % */\nvar CHAR_AMPERSAND            = 0x26; /* & */\nvar CHAR_SINGLE_QUOTE         = 0x27; /* ' */\nvar CHAR_ASTERISK             = 0x2A; /* * */\nvar CHAR_COMMA                = 0x2C; /* , */\nvar CHAR_MINUS                = 0x2D; /* - */\nvar CHAR_COLON                = 0x3A; /* : */\nvar CHAR_EQUALS               = 0x3D; /* = */\nvar CHAR_GREATER_THAN         = 0x3E; /* > */\nvar CHAR_QUESTION             = 0x3F; /* ? */\nvar CHAR_COMMERCIAL_AT        = 0x40; /* @ */\nvar CHAR_LEFT_SQUARE_BRACKET  = 0x5B; /* [ */\nvar CHAR_RIGHT_SQUARE_BRACKET = 0x5D; /* ] */\nvar CHAR_GRAVE_ACCENT         = 0x60; /* ` */\nvar CHAR_LEFT_CURLY_BRACKET   = 0x7B; /* { */\nvar CHAR_VERTICAL_LINE        = 0x7C; /* | */\nvar CHAR_RIGHT_CURLY_BRACKET  = 0x7D; /* } */\n\nvar ESCAPE_SEQUENCES = {};\n\nESCAPE_SEQUENCES[0x00]   = '\\\\0';\nESCAPE_SEQUENCES[0x07]   = '\\\\a';\nESCAPE_SEQUENCES[0x08]   = '\\\\b';\nESCAPE_SEQUENCES[0x09]   = '\\\\t';\nESCAPE_SEQUENCES[0x0A]   = '\\\\n';\nESCAPE_SEQUENCES[0x0B]   = '\\\\v';\nESCAPE_SEQUENCES[0x0C]   = '\\\\f';\nESCAPE_SEQUENCES[0x0D]   = '\\\\r';\nESCAPE_SEQUENCES[0x1B]   = '\\\\e';\nESCAPE_SEQUENCES[0x22]   = '\\\\\"';\nESCAPE_SEQUENCES[0x5C]   = '\\\\\\\\';\nESCAPE_SEQUENCES[0x85]   = '\\\\N';\nESCAPE_SEQUENCES[0xA0]   = '\\\\_';\nESCAPE_SEQUENCES[0x2028] = '\\\\L';\nESCAPE_SEQUENCES[0x2029] = '\\\\P';\n\nvar DEPRECATED_BOOLEANS_SYNTAX = [\n  'y', 'Y', 'yes', 'Yes', 'YES', 'on', 'On', 'ON',\n  'n', 'N', 'no', 'No', 'NO', 'off', 'Off', 'OFF'\n];\n\nvar DEPRECATED_BASE60_SYNTAX = /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\\.[0-9_]*)?$/;\n\nfunction compileStyleMap(schema, map) {\n  var result, keys, index, length, tag, style, type;\n\n  if (map === null) return {};\n\n  result = {};\n  keys = Object.keys(map);\n\n  for (index = 0, length = keys.length; index < length; index += 1) {\n    tag = keys[index];\n    style = String(map[tag]);\n\n    if (tag.slice(0, 2) === '!!') {\n      tag = 'tag:yaml.org,2002:' + tag.slice(2);\n    }\n    type = schema.compiledTypeMap['fallback'][tag];\n\n    if (type && _hasOwnProperty.call(type.styleAliases, style)) {\n      style = type.styleAliases[style];\n    }\n\n    result[tag] = style;\n  }\n\n  return result;\n}\n\nfunction encodeHex(character) {\n  var string, handle, length;\n\n  string = character.toString(16).toUpperCase();\n\n  if (character <= 0xFF) {\n    handle = 'x';\n    length = 2;\n  } else if (character <= 0xFFFF) {\n    handle = 'u';\n    length = 4;\n  } else if (character <= 0xFFFFFFFF) {\n    handle = 'U';\n    length = 8;\n  } else {\n    throw new exception('code point within a string may not be greater than 0xFFFFFFFF');\n  }\n\n  return '\\\\' + handle + common.repeat('0', length - string.length) + string;\n}\n\n\nvar QUOTING_TYPE_SINGLE = 1,\n    QUOTING_TYPE_DOUBLE = 2;\n\nfunction State(options) {\n  this.schema        = options['schema'] || _default;\n  this.indent        = Math.max(1, (options['indent'] || 2));\n  this.noArrayIndent = options['noArrayIndent'] || false;\n  this.skipInvalid   = options['skipInvalid'] || false;\n  this.flowLevel     = (common.isNothing(options['flowLevel']) ? -1 : options['flowLevel']);\n  this.styleMap      = compileStyleMap(this.schema, options['styles'] || null);\n  this.sortKeys      = options['sortKeys'] || false;\n  this.lineWidth     = options['lineWidth'] || 80;\n  this.noRefs        = options['noRefs'] || false;\n  this.noCompatMode  = options['noCompatMode'] || false;\n  this.condenseFlow  = options['condenseFlow'] || false;\n  this.quotingType   = options['quotingType'] === '\"' ? QUOTING_TYPE_DOUBLE : QUOTING_TYPE_SINGLE;\n  this.forceQuotes   = options['forceQuotes'] || false;\n  this.replacer      = typeof options['replacer'] === 'function' ? options['replacer'] : null;\n\n  this.implicitTypes = this.schema.compiledImplicit;\n  this.explicitTypes = this.schema.compiledExplicit;\n\n  this.tag = null;\n  this.result = '';\n\n  this.duplicates = [];\n  this.usedDuplicates = null;\n}\n\n// Indents every line in a string. Empty lines (\\n only) are not indented.\nfunction indentString(string, spaces) {\n  var ind = common.repeat(' ', spaces),\n      position = 0,\n      next = -1,\n      result = '',\n      line,\n      length = string.length;\n\n  while (position < length) {\n    next = string.indexOf('\\n', position);\n    if (next === -1) {\n      line = string.slice(position);\n      position = length;\n    } else {\n      line = string.slice(position, next + 1);\n      position = next + 1;\n    }\n\n    if (line.length && line !== '\\n') result += ind;\n\n    result += line;\n  }\n\n  return result;\n}\n\nfunction generateNextLine(state, level) {\n  return '\\n' + common.repeat(' ', state.indent * level);\n}\n\nfunction testImplicitResolving(state, str) {\n  var index, length, type;\n\n  for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {\n    type = state.implicitTypes[index];\n\n    if (type.resolve(str)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n// [33] s-white ::= s-space | s-tab\nfunction isWhitespace(c) {\n  return c === CHAR_SPACE || c === CHAR_TAB;\n}\n\n// Returns true if the character can be printed without escaping.\n// From YAML 1.2: \"any allowed characters known to be non-printable\n// should also be escaped. [However,] This isn’t mandatory\"\n// Derived from nb-char - \\t - #x85 - #xA0 - #x2028 - #x2029.\nfunction isPrintable(c) {\n  return  (0x00020 <= c && c <= 0x00007E)\n      || ((0x000A1 <= c && c <= 0x00D7FF) && c !== 0x2028 && c !== 0x2029)\n      || ((0x0E000 <= c && c <= 0x00FFFD) && c !== CHAR_BOM)\n      ||  (0x10000 <= c && c <= 0x10FFFF);\n}\n\n// [34] ns-char ::= nb-char - s-white\n// [27] nb-char ::= c-printable - b-char - c-byte-order-mark\n// [26] b-char  ::= b-line-feed | b-carriage-return\n// Including s-white (for some reason, examples doesn't match specs in this aspect)\n// ns-char ::= c-printable - b-line-feed - b-carriage-return - c-byte-order-mark\nfunction isNsCharOrWhitespace(c) {\n  return isPrintable(c)\n    && c !== CHAR_BOM\n    // - b-char\n    && c !== CHAR_CARRIAGE_RETURN\n    && c !== CHAR_LINE_FEED;\n}\n\n// [127]  ns-plain-safe(c) ::= c = flow-out  ⇒ ns-plain-safe-out\n//                             c = flow-in   ⇒ ns-plain-safe-in\n//                             c = block-key ⇒ ns-plain-safe-out\n//                             c = flow-key  ⇒ ns-plain-safe-in\n// [128] ns-plain-safe-out ::= ns-char\n// [129]  ns-plain-safe-in ::= ns-char - c-flow-indicator\n// [130]  ns-plain-char(c) ::=  ( ns-plain-safe(c) - “:” - “#” )\n//                            | ( /* An ns-char preceding */ “#” )\n//                            | ( “:” /* Followed by an ns-plain-safe(c) */ )\nfunction isPlainSafe(c, prev, inblock) {\n  var cIsNsCharOrWhitespace = isNsCharOrWhitespace(c);\n  var cIsNsChar = cIsNsCharOrWhitespace && !isWhitespace(c);\n  return (\n    // ns-plain-safe\n    inblock ? // c = flow-in\n      cIsNsCharOrWhitespace\n      : cIsNsCharOrWhitespace\n        // - c-flow-indicator\n        && c !== CHAR_COMMA\n        && c !== CHAR_LEFT_SQUARE_BRACKET\n        && c !== CHAR_RIGHT_SQUARE_BRACKET\n        && c !== CHAR_LEFT_CURLY_BRACKET\n        && c !== CHAR_RIGHT_CURLY_BRACKET\n  )\n    // ns-plain-char\n    && c !== CHAR_SHARP // false on '#'\n    && !(prev === CHAR_COLON && !cIsNsChar) // false on ': '\n    || (isNsCharOrWhitespace(prev) && !isWhitespace(prev) && c === CHAR_SHARP) // change to true on '[^ ]#'\n    || (prev === CHAR_COLON && cIsNsChar); // change to true on ':[^ ]'\n}\n\n// Simplified test for values allowed as the first character in plain style.\nfunction isPlainSafeFirst(c) {\n  // Uses a subset of ns-char - c-indicator\n  // where ns-char = nb-char - s-white.\n  // No support of ( ( “?” | “:” | “-” ) /* Followed by an ns-plain-safe(c)) */ ) part\n  return isPrintable(c) && c !== CHAR_BOM\n    && !isWhitespace(c) // - s-white\n    // - (c-indicator ::=\n    // “-” | “?” | “:” | “,” | “[” | “]” | “{” | “}”\n    && c !== CHAR_MINUS\n    && c !== CHAR_QUESTION\n    && c !== CHAR_COLON\n    && c !== CHAR_COMMA\n    && c !== CHAR_LEFT_SQUARE_BRACKET\n    && c !== CHAR_RIGHT_SQUARE_BRACKET\n    && c !== CHAR_LEFT_CURLY_BRACKET\n    && c !== CHAR_RIGHT_CURLY_BRACKET\n    // | “#” | “&” | “*” | “!” | “|” | “=” | “>” | “'” | “\"”\n    && c !== CHAR_SHARP\n    && c !== CHAR_AMPERSAND\n    && c !== CHAR_ASTERISK\n    && c !== CHAR_EXCLAMATION\n    && c !== CHAR_VERTICAL_LINE\n    && c !== CHAR_EQUALS\n    && c !== CHAR_GREATER_THAN\n    && c !== CHAR_SINGLE_QUOTE\n    && c !== CHAR_DOUBLE_QUOTE\n    // | “%” | “@” | “`”)\n    && c !== CHAR_PERCENT\n    && c !== CHAR_COMMERCIAL_AT\n    && c !== CHAR_GRAVE_ACCENT;\n}\n\n// Simplified test for values allowed as the last character in plain style.\nfunction isPlainSafeLast(c) {\n  // just not whitespace or colon, it will be checked to be plain character later\n  return !isWhitespace(c) && c !== CHAR_COLON;\n}\n\n// Same as 'string'.codePointAt(pos), but works in older browsers.\nfunction codePointAt(string, pos) {\n  var first = string.charCodeAt(pos), second;\n  if (first >= 0xD800 && first <= 0xDBFF && pos + 1 < string.length) {\n    second = string.charCodeAt(pos + 1);\n    if (second >= 0xDC00 && second <= 0xDFFF) {\n      // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n      return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n    }\n  }\n  return first;\n}\n\n// Determines whether block indentation indicator is required.\nfunction needIndentIndicator(string) {\n  var leadingSpaceRe = /^\\n* /;\n  return leadingSpaceRe.test(string);\n}\n\nvar STYLE_PLAIN   = 1,\n    STYLE_SINGLE  = 2,\n    STYLE_LITERAL = 3,\n    STYLE_FOLDED  = 4,\n    STYLE_DOUBLE  = 5;\n\n// Determines which scalar styles are possible and returns the preferred style.\n// lineWidth = -1 => no limit.\n// Pre-conditions: str.length > 0.\n// Post-conditions:\n//    STYLE_PLAIN or STYLE_SINGLE => no \\n are in the string.\n//    STYLE_LITERAL => no lines are suitable for folding (or lineWidth is -1).\n//    STYLE_FOLDED => a line > lineWidth and can be folded (and lineWidth != -1).\nfunction chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth,\n  testAmbiguousType, quotingType, forceQuotes, inblock) {\n\n  var i;\n  var char = 0;\n  var prevChar = null;\n  var hasLineBreak = false;\n  var hasFoldableLine = false; // only checked if shouldTrackWidth\n  var shouldTrackWidth = lineWidth !== -1;\n  var previousLineBreak = -1; // count the first line correctly\n  var plain = isPlainSafeFirst(codePointAt(string, 0))\n          && isPlainSafeLast(codePointAt(string, string.length - 1));\n\n  if (singleLineOnly || forceQuotes) {\n    // Case: no block styles.\n    // Check for disallowed characters to rule out plain and single.\n    for (i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {\n      char = codePointAt(string, i);\n      if (!isPrintable(char)) {\n        return STYLE_DOUBLE;\n      }\n      plain = plain && isPlainSafe(char, prevChar, inblock);\n      prevChar = char;\n    }\n  } else {\n    // Case: block styles permitted.\n    for (i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {\n      char = codePointAt(string, i);\n      if (char === CHAR_LINE_FEED) {\n        hasLineBreak = true;\n        // Check if any line can be folded.\n        if (shouldTrackWidth) {\n          hasFoldableLine = hasFoldableLine ||\n            // Foldable line = too long, and not more-indented.\n            (i - previousLineBreak - 1 > lineWidth &&\n             string[previousLineBreak + 1] !== ' ');\n          previousLineBreak = i;\n        }\n      } else if (!isPrintable(char)) {\n        return STYLE_DOUBLE;\n      }\n      plain = plain && isPlainSafe(char, prevChar, inblock);\n      prevChar = char;\n    }\n    // in case the end is missing a \\n\n    hasFoldableLine = hasFoldableLine || (shouldTrackWidth &&\n      (i - previousLineBreak - 1 > lineWidth &&\n       string[previousLineBreak + 1] !== ' '));\n  }\n  // Although every style can represent \\n without escaping, prefer block styles\n  // for multiline, since they're more readable and they don't add empty lines.\n  // Also prefer folding a super-long line.\n  if (!hasLineBreak && !hasFoldableLine) {\n    // Strings interpretable as another type have to be quoted;\n    // e.g. the string 'true' vs. the boolean true.\n    if (plain && !forceQuotes && !testAmbiguousType(string)) {\n      return STYLE_PLAIN;\n    }\n    return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;\n  }\n  // Edge case: block indentation indicator can only have one digit.\n  if (indentPerLevel > 9 && needIndentIndicator(string)) {\n    return STYLE_DOUBLE;\n  }\n  // At this point we know block styles are valid.\n  // Prefer literal style unless we want to fold.\n  if (!forceQuotes) {\n    return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;\n  }\n  return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;\n}\n\n// Note: line breaking/folding is implemented for only the folded style.\n// NB. We drop the last trailing newline (if any) of a returned block scalar\n//  since the dumper adds its own newline. This always works:\n//    • No ending newline => unaffected; already using strip \"-\" chomping.\n//    • Ending newline    => removed then restored.\n//  Importantly, this keeps the \"+\" chomp indicator from gaining an extra line.\nfunction writeScalar(state, string, level, iskey, inblock) {\n  state.dump = (function () {\n    if (string.length === 0) {\n      return state.quotingType === QUOTING_TYPE_DOUBLE ? '\"\"' : \"''\";\n    }\n    if (!state.noCompatMode) {\n      if (DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1 || DEPRECATED_BASE60_SYNTAX.test(string)) {\n        return state.quotingType === QUOTING_TYPE_DOUBLE ? ('\"' + string + '\"') : (\"'\" + string + \"'\");\n      }\n    }\n\n    var indent = state.indent * Math.max(1, level); // no 0-indent scalars\n    // As indentation gets deeper, let the width decrease monotonically\n    // to the lower bound min(state.lineWidth, 40).\n    // Note that this implies\n    //  state.lineWidth ≤ 40 + state.indent: width is fixed at the lower bound.\n    //  state.lineWidth > 40 + state.indent: width decreases until the lower bound.\n    // This behaves better than a constant minimum width which disallows narrower options,\n    // or an indent threshold which causes the width to suddenly increase.\n    var lineWidth = state.lineWidth === -1\n      ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);\n\n    // Without knowing if keys are implicit/explicit, assume implicit for safety.\n    var singleLineOnly = iskey\n      // No block styles in flow mode.\n      || (state.flowLevel > -1 && level >= state.flowLevel);\n    function testAmbiguity(string) {\n      return testImplicitResolving(state, string);\n    }\n\n    switch (chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth,\n      testAmbiguity, state.quotingType, state.forceQuotes && !iskey, inblock)) {\n\n      case STYLE_PLAIN:\n        return string;\n      case STYLE_SINGLE:\n        return \"'\" + string.replace(/'/g, \"''\") + \"'\";\n      case STYLE_LITERAL:\n        return '|' + blockHeader(string, state.indent)\n          + dropEndingNewline(indentString(string, indent));\n      case STYLE_FOLDED:\n        return '>' + blockHeader(string, state.indent)\n          + dropEndingNewline(indentString(foldString(string, lineWidth), indent));\n      case STYLE_DOUBLE:\n        return '\"' + escapeString(string) + '\"';\n      default:\n        throw new exception('impossible error: invalid scalar style');\n    }\n  }());\n}\n\n// Pre-conditions: string is valid for a block scalar, 1 <= indentPerLevel <= 9.\nfunction blockHeader(string, indentPerLevel) {\n  var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : '';\n\n  // note the special case: the string '\\n' counts as a \"trailing\" empty line.\n  var clip =          string[string.length - 1] === '\\n';\n  var keep = clip && (string[string.length - 2] === '\\n' || string === '\\n');\n  var chomp = keep ? '+' : (clip ? '' : '-');\n\n  return indentIndicator + chomp + '\\n';\n}\n\n// (See the note for writeScalar.)\nfunction dropEndingNewline(string) {\n  return string[string.length - 1] === '\\n' ? string.slice(0, -1) : string;\n}\n\n// Note: a long line without a suitable break point will exceed the width limit.\n// Pre-conditions: every char in str isPrintable, str.length > 0, width > 0.\nfunction foldString(string, width) {\n  // In folded style, $k$ consecutive newlines output as $k+1$ newlines—\n  // unless they're before or after a more-indented line, or at the very\n  // beginning or end, in which case $k$ maps to $k$.\n  // Therefore, parse each chunk as newline(s) followed by a content line.\n  var lineRe = /(\\n+)([^\\n]*)/g;\n\n  // first line (possibly an empty line)\n  var result = (function () {\n    var nextLF = string.indexOf('\\n');\n    nextLF = nextLF !== -1 ? nextLF : string.length;\n    lineRe.lastIndex = nextLF;\n    return foldLine(string.slice(0, nextLF), width);\n  }());\n  // If we haven't reached the first content line yet, don't add an extra \\n.\n  var prevMoreIndented = string[0] === '\\n' || string[0] === ' ';\n  var moreIndented;\n\n  // rest of the lines\n  var match;\n  while ((match = lineRe.exec(string))) {\n    var prefix = match[1], line = match[2];\n    moreIndented = (line[0] === ' ');\n    result += prefix\n      + (!prevMoreIndented && !moreIndented && line !== ''\n        ? '\\n' : '')\n      + foldLine(line, width);\n    prevMoreIndented = moreIndented;\n  }\n\n  return result;\n}\n\n// Greedy line breaking.\n// Picks the longest line under the limit each time,\n// otherwise settles for the shortest line over the limit.\n// NB. More-indented lines *cannot* be folded, as that would add an extra \\n.\nfunction foldLine(line, width) {\n  if (line === '' || line[0] === ' ') return line;\n\n  // Since a more-indented line adds a \\n, breaks can't be followed by a space.\n  var breakRe = / [^ ]/g; // note: the match index will always be <= length-2.\n  var match;\n  // start is an inclusive index. end, curr, and next are exclusive.\n  var start = 0, end, curr = 0, next = 0;\n  var result = '';\n\n  // Invariants: 0 <= start <= length-1.\n  //   0 <= curr <= next <= max(0, length-2). curr - start <= width.\n  // Inside the loop:\n  //   A match implies length >= 2, so curr and next are <= length-2.\n  while ((match = breakRe.exec(line))) {\n    next = match.index;\n    // maintain invariant: curr - start <= width\n    if (next - start > width) {\n      end = (curr > start) ? curr : next; // derive end <= length-2\n      result += '\\n' + line.slice(start, end);\n      // skip the space that was output as \\n\n      start = end + 1;                    // derive start <= length-1\n    }\n    curr = next;\n  }\n\n  // By the invariants, start <= length-1, so there is something left over.\n  // It is either the whole string or a part starting from non-whitespace.\n  result += '\\n';\n  // Insert a break if the remainder is too long and there is a break available.\n  if (line.length - start > width && curr > start) {\n    result += line.slice(start, curr) + '\\n' + line.slice(curr + 1);\n  } else {\n    result += line.slice(start);\n  }\n\n  return result.slice(1); // drop extra \\n joiner\n}\n\n// Escapes a double-quoted string.\nfunction escapeString(string) {\n  var result = '';\n  var char = 0;\n  var escapeSeq;\n\n  for (var i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {\n    char = codePointAt(string, i);\n    escapeSeq = ESCAPE_SEQUENCES[char];\n\n    if (!escapeSeq && isPrintable(char)) {\n      result += string[i];\n      if (char >= 0x10000) result += string[i + 1];\n    } else {\n      result += escapeSeq || encodeHex(char);\n    }\n  }\n\n  return result;\n}\n\nfunction writeFlowSequence(state, level, object) {\n  var _result = '',\n      _tag    = state.tag,\n      index,\n      length,\n      value;\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    value = object[index];\n\n    if (state.replacer) {\n      value = state.replacer.call(object, String(index), value);\n    }\n\n    // Write only valid elements, put null instead of invalid elements.\n    if (writeNode(state, level, value, false, false) ||\n        (typeof value === 'undefined' &&\n         writeNode(state, level, null, false, false))) {\n\n      if (_result !== '') _result += ',' + (!state.condenseFlow ? ' ' : '');\n      _result += state.dump;\n    }\n  }\n\n  state.tag = _tag;\n  state.dump = '[' + _result + ']';\n}\n\nfunction writeBlockSequence(state, level, object, compact) {\n  var _result = '',\n      _tag    = state.tag,\n      index,\n      length,\n      value;\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    value = object[index];\n\n    if (state.replacer) {\n      value = state.replacer.call(object, String(index), value);\n    }\n\n    // Write only valid elements, put null instead of invalid elements.\n    if (writeNode(state, level + 1, value, true, true, false, true) ||\n        (typeof value === 'undefined' &&\n         writeNode(state, level + 1, null, true, true, false, true))) {\n\n      if (!compact || _result !== '') {\n        _result += generateNextLine(state, level);\n      }\n\n      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n        _result += '-';\n      } else {\n        _result += '- ';\n      }\n\n      _result += state.dump;\n    }\n  }\n\n  state.tag = _tag;\n  state.dump = _result || '[]'; // Empty sequence if no valid values.\n}\n\nfunction writeFlowMapping(state, level, object) {\n  var _result       = '',\n      _tag          = state.tag,\n      objectKeyList = Object.keys(object),\n      index,\n      length,\n      objectKey,\n      objectValue,\n      pairBuffer;\n\n  for (index = 0, length = objectKeyList.length; index < length; index += 1) {\n\n    pairBuffer = '';\n    if (_result !== '') pairBuffer += ', ';\n\n    if (state.condenseFlow) pairBuffer += '\"';\n\n    objectKey = objectKeyList[index];\n    objectValue = object[objectKey];\n\n    if (state.replacer) {\n      objectValue = state.replacer.call(object, objectKey, objectValue);\n    }\n\n    if (!writeNode(state, level, objectKey, false, false)) {\n      continue; // Skip this pair because of invalid key;\n    }\n\n    if (state.dump.length > 1024) pairBuffer += '? ';\n\n    pairBuffer += state.dump + (state.condenseFlow ? '\"' : '') + ':' + (state.condenseFlow ? '' : ' ');\n\n    if (!writeNode(state, level, objectValue, false, false)) {\n      continue; // Skip this pair because of invalid value.\n    }\n\n    pairBuffer += state.dump;\n\n    // Both key and value are valid.\n    _result += pairBuffer;\n  }\n\n  state.tag = _tag;\n  state.dump = '{' + _result + '}';\n}\n\nfunction writeBlockMapping(state, level, object, compact) {\n  var _result       = '',\n      _tag          = state.tag,\n      objectKeyList = Object.keys(object),\n      index,\n      length,\n      objectKey,\n      objectValue,\n      explicitPair,\n      pairBuffer;\n\n  // Allow sorting keys so that the output file is deterministic\n  if (state.sortKeys === true) {\n    // Default sorting\n    objectKeyList.sort();\n  } else if (typeof state.sortKeys === 'function') {\n    // Custom sort function\n    objectKeyList.sort(state.sortKeys);\n  } else if (state.sortKeys) {\n    // Something is wrong\n    throw new exception('sortKeys must be a boolean or a function');\n  }\n\n  for (index = 0, length = objectKeyList.length; index < length; index += 1) {\n    pairBuffer = '';\n\n    if (!compact || _result !== '') {\n      pairBuffer += generateNextLine(state, level);\n    }\n\n    objectKey = objectKeyList[index];\n    objectValue = object[objectKey];\n\n    if (state.replacer) {\n      objectValue = state.replacer.call(object, objectKey, objectValue);\n    }\n\n    if (!writeNode(state, level + 1, objectKey, true, true, true)) {\n      continue; // Skip this pair because of invalid key.\n    }\n\n    explicitPair = (state.tag !== null && state.tag !== '?') ||\n                   (state.dump && state.dump.length > 1024);\n\n    if (explicitPair) {\n      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n        pairBuffer += '?';\n      } else {\n        pairBuffer += '? ';\n      }\n    }\n\n    pairBuffer += state.dump;\n\n    if (explicitPair) {\n      pairBuffer += generateNextLine(state, level);\n    }\n\n    if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {\n      continue; // Skip this pair because of invalid value.\n    }\n\n    if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n      pairBuffer += ':';\n    } else {\n      pairBuffer += ': ';\n    }\n\n    pairBuffer += state.dump;\n\n    // Both key and value are valid.\n    _result += pairBuffer;\n  }\n\n  state.tag = _tag;\n  state.dump = _result || '{}'; // Empty mapping if no valid pairs.\n}\n\nfunction detectType(state, object, explicit) {\n  var _result, typeList, index, length, type, style;\n\n  typeList = explicit ? state.explicitTypes : state.implicitTypes;\n\n  for (index = 0, length = typeList.length; index < length; index += 1) {\n    type = typeList[index];\n\n    if ((type.instanceOf  || type.predicate) &&\n        (!type.instanceOf || ((typeof object === 'object') && (object instanceof type.instanceOf))) &&\n        (!type.predicate  || type.predicate(object))) {\n\n      if (explicit) {\n        if (type.multi && type.representName) {\n          state.tag = type.representName(object);\n        } else {\n          state.tag = type.tag;\n        }\n      } else {\n        state.tag = '?';\n      }\n\n      if (type.represent) {\n        style = state.styleMap[type.tag] || type.defaultStyle;\n\n        if (_toString.call(type.represent) === '[object Function]') {\n          _result = type.represent(object, style);\n        } else if (_hasOwnProperty.call(type.represent, style)) {\n          _result = type.represent[style](object, style);\n        } else {\n          throw new exception('!<' + type.tag + '> tag resolver accepts not \"' + style + '\" style');\n        }\n\n        state.dump = _result;\n      }\n\n      return true;\n    }\n  }\n\n  return false;\n}\n\n// Serializes `object` and writes it to global `result`.\n// Returns true on success, or false on invalid object.\n//\nfunction writeNode(state, level, object, block, compact, iskey, isblockseq) {\n  state.tag = null;\n  state.dump = object;\n\n  if (!detectType(state, object, false)) {\n    detectType(state, object, true);\n  }\n\n  var type = _toString.call(state.dump);\n  var inblock = block;\n  var tagStr;\n\n  if (block) {\n    block = (state.flowLevel < 0 || state.flowLevel > level);\n  }\n\n  var objectOrArray = type === '[object Object]' || type === '[object Array]',\n      duplicateIndex,\n      duplicate;\n\n  if (objectOrArray) {\n    duplicateIndex = state.duplicates.indexOf(object);\n    duplicate = duplicateIndex !== -1;\n  }\n\n  if ((state.tag !== null && state.tag !== '?') || duplicate || (state.indent !== 2 && level > 0)) {\n    compact = false;\n  }\n\n  if (duplicate && state.usedDuplicates[duplicateIndex]) {\n    state.dump = '*ref_' + duplicateIndex;\n  } else {\n    if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {\n      state.usedDuplicates[duplicateIndex] = true;\n    }\n    if (type === '[object Object]') {\n      if (block && (Object.keys(state.dump).length !== 0)) {\n        writeBlockMapping(state, level, state.dump, compact);\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + state.dump;\n        }\n      } else {\n        writeFlowMapping(state, level, state.dump);\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;\n        }\n      }\n    } else if (type === '[object Array]') {\n      if (block && (state.dump.length !== 0)) {\n        if (state.noArrayIndent && !isblockseq && level > 0) {\n          writeBlockSequence(state, level - 1, state.dump, compact);\n        } else {\n          writeBlockSequence(state, level, state.dump, compact);\n        }\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + state.dump;\n        }\n      } else {\n        writeFlowSequence(state, level, state.dump);\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;\n        }\n      }\n    } else if (type === '[object String]') {\n      if (state.tag !== '?') {\n        writeScalar(state, state.dump, level, iskey, inblock);\n      }\n    } else if (type === '[object Undefined]') {\n      return false;\n    } else {\n      if (state.skipInvalid) return false;\n      throw new exception('unacceptable kind of an object to dump ' + type);\n    }\n\n    if (state.tag !== null && state.tag !== '?') {\n      // Need to encode all characters except those allowed by the spec:\n      //\n      // [35] ns-dec-digit    ::=  [#x30-#x39] /* 0-9 */\n      // [36] ns-hex-digit    ::=  ns-dec-digit\n      //                         | [#x41-#x46] /* A-F */ | [#x61-#x66] /* a-f */\n      // [37] ns-ascii-letter ::=  [#x41-#x5A] /* A-Z */ | [#x61-#x7A] /* a-z */\n      // [38] ns-word-char    ::=  ns-dec-digit | ns-ascii-letter | “-”\n      // [39] ns-uri-char     ::=  “%” ns-hex-digit ns-hex-digit | ns-word-char | “#”\n      //                         | “;” | “/” | “?” | “:” | “@” | “&” | “=” | “+” | “$” | “,”\n      //                         | “_” | “.” | “!” | “~” | “*” | “'” | “(” | “)” | “[” | “]”\n      //\n      // Also need to encode '!' because it has special meaning (end of tag prefix).\n      //\n      tagStr = encodeURI(\n        state.tag[0] === '!' ? state.tag.slice(1) : state.tag\n      ).replace(/!/g, '%21');\n\n      if (state.tag[0] === '!') {\n        tagStr = '!' + tagStr;\n      } else if (tagStr.slice(0, 18) === 'tag:yaml.org,2002:') {\n        tagStr = '!!' + tagStr.slice(18);\n      } else {\n        tagStr = '!<' + tagStr + '>';\n      }\n\n      state.dump = tagStr + ' ' + state.dump;\n    }\n  }\n\n  return true;\n}\n\nfunction getDuplicateReferences(object, state) {\n  var objects = [],\n      duplicatesIndexes = [],\n      index,\n      length;\n\n  inspectNode(object, objects, duplicatesIndexes);\n\n  for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {\n    state.duplicates.push(objects[duplicatesIndexes[index]]);\n  }\n  state.usedDuplicates = new Array(length);\n}\n\nfunction inspectNode(object, objects, duplicatesIndexes) {\n  var objectKeyList,\n      index,\n      length;\n\n  if (object !== null && typeof object === 'object') {\n    index = objects.indexOf(object);\n    if (index !== -1) {\n      if (duplicatesIndexes.indexOf(index) === -1) {\n        duplicatesIndexes.push(index);\n      }\n    } else {\n      objects.push(object);\n\n      if (Array.isArray(object)) {\n        for (index = 0, length = object.length; index < length; index += 1) {\n          inspectNode(object[index], objects, duplicatesIndexes);\n        }\n      } else {\n        objectKeyList = Object.keys(object);\n\n        for (index = 0, length = objectKeyList.length; index < length; index += 1) {\n          inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);\n        }\n      }\n    }\n  }\n}\n\nfunction dump$1(input, options) {\n  options = options || {};\n\n  var state = new State(options);\n\n  if (!state.noRefs) getDuplicateReferences(input, state);\n\n  var value = input;\n\n  if (state.replacer) {\n    value = state.replacer.call({ '': value }, '', value);\n  }\n\n  if (writeNode(state, 0, value, true, true)) return state.dump + '\\n';\n\n  return '';\n}\n\nvar dump_1 = dump$1;\n\nvar dumper = {\n\tdump: dump_1\n};\n\nfunction renamed(from, to) {\n  return function () {\n    throw new Error('Function yaml.' + from + ' is removed in js-yaml 4. ' +\n      'Use yaml.' + to + ' instead, which is now safe by default.');\n  };\n}\n\n\nvar Type                = type;\nvar Schema              = schema;\nvar FAILSAFE_SCHEMA     = failsafe;\nvar JSON_SCHEMA         = json;\nvar CORE_SCHEMA         = core;\nvar DEFAULT_SCHEMA      = _default;\nvar load                = loader.load;\nvar loadAll             = loader.loadAll;\nvar dump                = dumper.dump;\nvar YAMLException       = exception;\n\n// Re-export all types in case user wants to create custom schema\nvar types = {\n  binary:    binary,\n  float:     float,\n  map:       map,\n  null:      _null,\n  pairs:     pairs,\n  set:       set,\n  timestamp: timestamp,\n  bool:      bool,\n  int:       int,\n  merge:     merge,\n  omap:      omap,\n  seq:       seq,\n  str:       str\n};\n\n// Removed functions from JS-YAML 3.0.x\nvar safeLoad            = renamed('safeLoad', 'load');\nvar safeLoadAll         = renamed('safeLoadAll', 'loadAll');\nvar safeDump            = renamed('safeDump', 'dump');\n\nvar jsYaml = {\n\tType: Type,\n\tSchema: Schema,\n\tFAILSAFE_SCHEMA: FAILSAFE_SCHEMA,\n\tJSON_SCHEMA: JSON_SCHEMA,\n\tCORE_SCHEMA: CORE_SCHEMA,\n\tDEFAULT_SCHEMA: DEFAULT_SCHEMA,\n\tload: load,\n\tloadAll: loadAll,\n\tdump: dump,\n\tYAMLException: YAMLException,\n\ttypes: types,\n\tsafeLoad: safeLoad,\n\tsafeLoadAll: safeLoadAll,\n\tsafeDump: safeDump\n};\n\nexport default jsYaml;\nexport { CORE_SCHEMA, DEFAULT_SCHEMA, FAILSAFE_SCHEMA, JSON_SCHEMA, Schema, Type, YAMLException, dump, load, loadAll, safeDump, safeLoad, safeLoadAll, types };\n"],"names":[],"sourceRoot":""}