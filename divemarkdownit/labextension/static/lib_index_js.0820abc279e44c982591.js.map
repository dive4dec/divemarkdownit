{"version":3,"file":"lib_index_js.0820abc279e44c982591.js","mappings":";;;;;;;;;;;;;;AAAwC;;;;;;;;;;;;;;;;;;;;;;;;;;ACAuB;AACQ;AACtB;AACK;AACR;AACF;AACwD;AAChE;AACpC;AACA,WAAW,iDAAY,CAAC;AACxB;AACA,cAAc,qDAAgB;AAC9B,eAAe,yEAAgB,EAAE,iEAAe;AAChD,eAAe,2DAAS;AACxB;AACA,gBAAgB,kBAAkB;AAClC,4BAA4B,uDAAiB;AAC7C;AACA,QAAQ,uEAAkC;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,2DAAsB;AAClD;AACA;AACA;AACA,sCAAsC,2CAAK;AAC3C;AACA;AACA,wCAAwC,wDAAkB;AAC1D,uCAAuC,gEAAc,GAAG,SAAS;AACjE;AACA,8CAA8C,gDAAW;AACzD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,oBAAoB,YAAY;AAChC;AACA;AACA;AACA,SAAS;AACT,4BAA4B,6DAAwB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,qBAAqB,2DAAsB;AAC3C,sBAAsB,qDAAgB;AACtC,SAAS;AACT;AACA,qBAAqB,6DAAwB;AAC7C,sBAAsB,qDAAgB;AACtC,SAAS;AACT;AACA;AACA,kBAAkB,SAAS,6DAAwB,EAAE;AACrD,kBAAkB,SAAS,2DAAsB;AACjD;AACA;AACA;AACA;AACA;AACA,iEAAe,UAAU,6CAAO,CAAC,EAAC;;;;;;;;;;;;;;;;;;;;;;;;AC7ES;AACsB;AACD;AAC3B;AACO;AAC5C,0BAA0B,0FAAsC;AAChE;AACA;AACA;AACO;AACP;AACA,mCAAmC,qDAAM;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,qDAAgB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA,6BAA6B,iEAAa;AAC1C;AACA,wDAAwD,KAAK;AAC7D;AACA;AACA;AACA;AACA,oBAAoB,4DAAQ;AAC5B;AACA;AACA;AACA,wDAAwD,MAAM;AAC9D;AACA;AACA;AACA,oDAAoD,KAAK;AACzD,+DAA+D,IAAI;AACnE;AACA;AACA;AACA,QAAQ,0FAAsC;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C,uEAAuE;AACvE,qBAAqB,oDAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,GAAG;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,8EAA8E,GAAG;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wFAAoC,EAAE;AACtE;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC1MkD;AACT;AACzC;AACA;AACA;AACO,eAAe,8DAAsB,CAAC,iDAAY;AACzD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,mCAAmC,6OACuC;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;ACzBiD;AACT;AACzC;AACA;AACA;AACO,iBAAiB,8DAAsB,CAAC,iDAAY;AAC3D;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,qCAAqC,uPACyC;AAC9E;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;AChCiD;AACT;AACzC;AACA;AACA;AACO,iBAAiB,8DAAsB,CAAC,iDAAY;AAC3D;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,iBAAiB,QAAQ;;AAEzB,WAAW,IAAI;;AAEf;;AAEA,OAAO,SAAS;AAChB;AACA;;AAEA;;AAEA,OAAO;AACP;;AAEA;;AAEA,OAAO,YAAY;AACnB;AACA;;AAEA;;AAEA,SAAS,MAAM;AACf,OAAO,SAAS;AAChB;AACA;;AAEA;;AAEA,OAAO,OAAO;AACd;AACA;;AAEA,OAAO,QAAQ;AACf;;AAEA;AACA;;AAEA;;AAEA,OAAO,YAAY;AACnB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,IAAI,IAAI;AACR,IAAI,IAAI;AACR,GAAG,KAAK;AACR;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG,KAAK,UAAU,IAAI,cAAc;AACpC;AACA;AACA,KAAK;AACL;AACA,qCAAqC,uPACyC;AAC9E;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;ACtFiD;AACT;AACzC;AACA;AACA;AACO,iBAAiB,8DAAsB,CAAC,iDAAY;AAC3D;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,qCAAqC,uPACyC;AAC9E;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;;;;AC7BiC;AACI;AACA;AACA;AACJ;AAC3B,iBAAiB,2CAAM,EAAE,+CAAQ,EAAE,+CAAQ,EAAE,+CAAQ,EAAE,2CAAI;;;;;;;;;;;;;;;;;ACLhB;AACT;AACzC;AACA;AACA;AACO,aAAa,8DAAsB,CAAC,iDAAY;AACvD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,iCAAiC,gRACuD;AACxF;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;;;;;;AC9B0C;AACoB;AAChC;AAC/B;AACA;AACA;AACA;AACA;AACA,qBAAqB,QAAQ;AAC7B,qBAAqB,QAAQ;AACtB,oBAAoB,2DAAS;AACpC;AACA;AACA,qCAAqC,qDAAM;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,iCAAiC,8DAAY;AACpD;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,gDAAmB,QAAQ,4CAA4C;AACrG;AACA,mBAAmB,gDAAmB;AACtC;AACA,gBAAgB,YAAY;AAC5B,gBAAgB,gDAAmB;AACnC,YAAY,gDAAmB;AAC/B,gBAAgB,gDAAmB;AACnC,oBAAoB,gDAAmB;AACvC,wBAAwB,gDAAmB,QAAQ,UAAU,UAAU,GAAG;AAC1E,oBAAoB,gDAAmB;AACvC,wBAAwB,gDAAmB,QAAQ,UAAU,UAAU,GAAG;AAC1E,wBAAwB,gDAAmB;AAC3C,oBAAoB,gDAAmB;AACvC,YAAY,gDAAmB;AAC/B,gBAAgB,gDAAmB,cAAc,eAAe;AAChE,oBAAoB,gDAAmB;AACvC,oBAAoB,gDAAmB;AACvC,wBAAwB,gDAAmB,YAAY,8EAA8E;AACrI;AACA,wBAAwB,gDAAmB;AAC3C,oBAAoB,gDAAmB;AACvC;AACA,wBAAwB,gDAAmB;AAC3C;AACA,gBAAgB,gDAAmB,SAAS,eAAe;AAC3D,gBAAgB,gDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gDAAmB,SAAS,uCAAuC;AACnF,YAAY,gDAAmB,QAAQ,UAAU,UAAU,GAAG,YAAY,GAAG;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA,gBAAgB,gDAAmB,cAAc,yBAAyB,UAAU,GAAG,YAAY,4BAA4B;AAC/H,YAAY,gDAAmB;AAC/B,gBAAgB,gDAAmB,SAAS,qBAAqB,YAAY,GAAG;AAChF,oBAAoB,gDAAmB;AACvC,wBAAwB,gDAAmB,YAAY,sGAAsG;AAC7J;AACA,gBAAgB,gDAAmB,SAAS,uBAAuB;AACnE,YAAY,gDAAmB;AAC/B,YAAY,gDAAmB,SAAS,2BAA2B;AACnE;AACA;AACA,gBAAgB,gDAAmB,SAAS,UAAU;AACtD,YAAY,gDAAmB,QAAQ,8CAA8C;AACrF;AACA;AACA,gBAAgB,gDAAmB,UAAU,YAAY;AACzD,YAAY,gDAAmB;AAC/B,gBAAgB,gDAAmB;AACnC,oBAAoB,gDAAmB;AACvC,YAAY,gDAAmB;AAC/B,gBAAgB,gDAAmB;AACnC;AACA;;;;;;;;;;;;;;;;ACxL4C;AAC5C;AACA;AACA;AACO;AACP;AACA,eAAe,YAAY,GAAG,YAAY;AAC1C;AACA,mBAAmB,qDAAgB;AACnC;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACb0C;AACwB;AAC3D;AACA;AACA,wBAAwB,8DAAO;AACtC,aAAa,aAAa;AAC1B,YAAY,kFAA2B;AACvC,CAAC;AACM,6BAA6B,oDAAK;AAClC;AACP;AACA;AACA;AACA,CAAC,8BAA8B;;;;;;;;;;;;;;;;;ACb6B;AACiB;AAC7E;AACA;AACA;AACO,+BAA+B,sEAAkB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,kEAAU;AACtC;AACA;AACA,eAAe,mEAAW;AAC1B,qBAAqB,kEAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://divemarkdownit/./lib/index.js","webpack://divemarkdownit/./lib/markdown-it/index.js","webpack://divemarkdownit/./lib/markdown-it/manager.js","webpack://divemarkdownit/./lib/markdown-it/plugins/anchor.js","webpack://divemarkdownit/./lib/markdown-it/plugins/diagrams.js","webpack://divemarkdownit/./lib/markdown-it/plugins/docutils.js","webpack://divemarkdownit/./lib/markdown-it/plugins/footnote.js","webpack://divemarkdownit/./lib/markdown-it/plugins/index.js","webpack://divemarkdownit/./lib/markdown-it/plugins/tasklist.js","webpack://divemarkdownit/./lib/markdown-it/setting.js","webpack://divemarkdownit/./lib/markdown-it/utils.js","webpack://divemarkdownit/./lib/markdown-it/values.js","webpack://divemarkdownit/./lib/markdown-it/widget.js"],"sourcesContent":["export { default } from './markdown-it';\n","import { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { MainAreaWidget, ICommandPalette } from '@jupyterlab/apputils';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { MarkdownItSettings, Model } from './setting';\nimport { MarkdownItManager } from './manager';\nimport { RenderedMarkdown } from './widget';\nimport { kPackageName, kMarkupIcon, kCommandCategory, CommandID, IMarkdownManager } from './values';\nimport { plugins } from './plugins';\nconst core = {\n    id: `${kPackageName}:core`,\n    autoStart: true,\n    provides: IMarkdownManager,\n    requires: [ISettingRegistry, ICommandPalette],\n    optional: [IMainMenu],\n    activate: (app, settings, palette, menu) => {\n        const { commands, shell } = app;\n        const manager = new MarkdownItManager();\n        // set the static manager\n        RenderedMarkdown.markdownItManager = manager;\n        // eventually load settings\n        settings\n            .load(core.id)\n            .then(settings => (manager.settings = settings))\n            .catch(console.warn);\n        let settingsMain;\n        // commands\n        commands.addCommand(CommandID.showSettings, {\n            label: 'JupyterLab MarkdownIt Settings...',\n            execute: args => {\n                if (settingsMain == null) {\n                    const model = new Model();\n                    model.advancedRequested.connect(() => commands.execute('settingeditor:open'));\n                    model.manager = manager;\n                    const content = new MarkdownItSettings(model);\n                    settingsMain = new MainAreaWidget({ content });\n                    settingsMain.title.label = 'JupyterLab MarkdownIt';\n                    settingsMain.title.icon = kMarkupIcon;\n                    settingsMain.disposed.connect(() => (settingsMain = null));\n                }\n                shell.add(settingsMain, 'main');\n                shell.activateById(settingsMain.id);\n            }\n        });\n        // cached enabled setting\n        let enabled = true;\n        manager.settingsChanged.connect(() => {\n            const { composite } = manager.settings;\n            if (composite != null) {\n                enabled = !!composite.enabled;\n            }\n        });\n        commands.addCommand(CommandID.toggleRenderer, {\n            label: args => 'Use JupyterLab MarkdownIt',\n            caption: 'Reopen documents to see changes',\n            isToggled: () => enabled,\n            isEnabled: () => manager.settings != null,\n            execute: args => {\n                manager.enabled = !!((args === null || args === void 0 ? void 0 : args.enabled) == null ? !enabled : args.enabled);\n            }\n        });\n        palette.addItem({\n            command: CommandID.showSettings,\n            category: kCommandCategory\n        });\n        palette.addItem({\n            command: CommandID.toggleRenderer,\n            category: kCommandCategory\n        });\n        if (menu) {\n            menu.settingsMenu.addGroup([\n                { command: CommandID.toggleRenderer },\n                { command: CommandID.showSettings }\n            ], 100);\n        }\n        return manager;\n    }\n};\nexport default [core, ...plugins];\n","import { Signal } from '@lumino/signaling';\nimport { markdownRendererFactory } from '@jupyterlab/rendermime';\nimport { CodeMirrorEditor, Mode } from '@jupyterlab/codemirror';\nimport MarkdownIt from 'markdown-it';\nimport { RenderedMarkdown } from './widget';\nconst ORIGINAL_RENDERER = markdownRendererFactory.createRenderer;\n/**\n * An implementation of a source of markdown renderers with markdown-it and plugins\n */\nexport class MarkdownItManager {\n    constructor() {\n        this.settingsChanged = new Signal(this);\n        /**\n         * A list of plugin ids disabled by user settings\n         */\n        this.userDisabledPlugins = [];\n        /**\n         * Whether to use the markdown-it renderer: if installed, will use unless configured by user\n         */\n        this.useMarkdownIt = true;\n        /**\n         * MarkdownIt options configured by the user.\n         */\n        this.userMarkdownItOptions = {};\n        /**\n         * Per-plugin options configured by the user.\n         */\n        this.userPluginOptions = {};\n        /**\n         * Providers labeled by an arbitrary key (usually the markdown-it package name)\n         */\n        this._pluginProviders = new Map();\n        /**\n         * Create a new renderer, either with markdown-it or the original implementation\n         */\n        this.createRenderer = (options) => {\n            return this.useMarkdownIt\n                ? new RenderedMarkdown(options)\n                : ORIGINAL_RENDERER(options);\n        };\n        /**\n         * Use CodeMirror to highlight code blocks,\n         *\n         * NOTE: May be overridden by plugins\n         */\n        this.highlightCode = (str, lang) => {\n            if (!lang) {\n                return ''; // use external default escaping\n            }\n            try {\n                const spec = Mode.findBest(lang);\n                if (!spec) {\n                    console.warn(`No CodeMirror mode: ${lang}`);\n                    return;\n                }\n                const el = document.createElement('div');\n                try {\n                    Mode.run(str, spec.mime, el);\n                    return el.innerHTML;\n                }\n                catch (err) {\n                    console.warn(`Failed to highlight ${lang} code`, err);\n                }\n            }\n            catch (err) {\n                console.warn(`No CodeMirror mode: ${lang}`);\n                console.warn(`Require CodeMirror mode error: ${err}`);\n            }\n            return '';\n        };\n        markdownRendererFactory.createRenderer = this.createRenderer;\n    }\n    /**\n     * Update the settings, and handle changes.\n     */\n    set settings(settings) {\n        var _a;\n        if (this._settings) {\n            this._settings.changed.disconnect(this.onSettingsChanged, this);\n        }\n        this._settings = settings;\n        if (settings != null) {\n            (_a = this._settings) === null || _a === void 0 ? void 0 : _a.changed.connect(this.onSettingsChanged, this);\n            this.onSettingsChanged();\n        }\n    }\n    /**\n     * The settings\n     */\n    get settings() {\n        return this._settings;\n    }\n    /**\n     * Update caches of settings values for new renderers\n     */\n    onSettingsChanged() {\n        var _a, _b, _c, _d;\n        const useMarkdownIt = (_a = this.settings) === null || _a === void 0 ? void 0 : _a.composite['enabled'];\n        this.useMarkdownIt = useMarkdownIt == null ? true : useMarkdownIt;\n        this.userMarkdownItOptions =\n            ((_b = this.settings) === null || _b === void 0 ? void 0 : _b.composite['markdown-it-options']) || {};\n        this.userDisabledPlugins =\n            ((_c = this.settings) === null || _c === void 0 ? void 0 : _c.composite['disabled-plugins']) || [];\n        this.userPluginOptions =\n            ((_d = this.settings) === null || _d === void 0 ? void 0 : _d.composite['plugin-options']) || {};\n        // re-brodcast settings changes\n        this.settingsChanged.emit(void 0);\n    }\n    get enabled() {\n        var _a;\n        const enabled = (_a = this.settings) === null || _a === void 0 ? void 0 : _a.composite;\n        return !!(enabled == null ? true : enabled);\n    }\n    set enabled(enabled) {\n        if (this.settings == null) {\n            console.warn(\"Can't set enabled status of markdown extensions without settings\");\n            return;\n        }\n        this.settings.set('enabled', enabled);\n    }\n    /**\n     * Add a provider for a plugin which can be resolved lazily\n     */\n    addPluginProvider(provider) {\n        this._pluginProviders.set(provider.id, provider);\n    }\n    getPluginProvider(id) {\n        return this._pluginProviders.get(id);\n    }\n    get pluginProviderIds() {\n        return [...this._pluginProviders.keys()];\n    }\n    /**\n     * Remove a provider by name\n     */\n    removePluginProvider(name) {\n        this._pluginProviders.delete(name);\n    }\n    /**\n     * Get a MarkdownIt instance\n     */\n    async getMarkdownIt(widget, options = {}) {\n        const allOptions = Object.assign(Object.assign(Object.assign({}, (await this.getOptions(widget))), options), this.userMarkdownItOptions);\n        let md = new MarkdownIt('default', allOptions);\n        for (const [id, provider] of this._pluginProviders.entries()) {\n            if (this.userDisabledPlugins.indexOf(id) !== -1) {\n                continue;\n            }\n            try {\n                const userOptions = this.userPluginOptions[id] || [];\n                const [plugin, ...pluginOptions] = await provider.plugin();\n                let i = 0;\n                const maxOptions = Math.max(pluginOptions.length, userOptions.length);\n                const compositeOptions = new Array(maxOptions);\n                while (i < maxOptions) {\n                    compositeOptions[i] =\n                        i < userOptions.length ? userOptions[i] : pluginOptions[i];\n                    i++;\n                }\n                md = md.use(plugin, ...compositeOptions);\n            }\n            catch (err) {\n                console.warn(`Failed to load/use markdown-it plugin ${id}`, err);\n            }\n        }\n        return md;\n    }\n    /**\n     * Combine core options with base options, plugin provider options, and user settings\n     */\n    async getOptions(widget) {\n        let allOptions = this.baseMarkdownItOptions;\n        for (const [id, plugin] of this._pluginProviders.entries()) {\n            if (this.userDisabledPlugins.indexOf(id) !== -1) {\n                continue;\n            }\n            if (plugin.options == null) {\n                continue;\n            }\n            try {\n                allOptions = Object.assign(Object.assign({}, allOptions), (await plugin.options(widget)));\n            }\n            catch (err) {\n                console.warn(`Failed to get options from markdown-it plugin ${id}`, err);\n            }\n        }\n        return allOptions;\n    }\n    /**\n     * Default MarkdownIt options,\n     *\n     * NOTE: May be overridden by plugins\n     */\n    get baseMarkdownItOptions() {\n        return {\n            html: true,\n            linkify: true,\n            typographer: true,\n            langPrefix: `cm-s-${CodeMirrorEditor.defaultConfig.theme} language-`,\n            highlight: this.highlightCode\n        };\n    }\n}\n","import { simpleMarkdownItPlugin } from '../utils';\nimport { kPackageName } from '../values';\n/**\n * Adds anchors to headers\n */\nexport const anchor = simpleMarkdownItPlugin(kPackageName, {\n    id: 'markdown-it-anchor',\n    title: 'Heading Anchors',\n    description: 'Create clickable links for header elements',\n    documentationUrls: {\n        Plugin: 'https://github.com/valeriangalliat/markdown-it-anchor'\n    },\n    plugin: async () => {\n        const anchorPlugin = await import(\n        /* webpackChunkName: \"markdown-it-anchor\" */ 'markdown-it-anchor');\n        return [\n            anchorPlugin.default,\n            {\n                // match JupyterLab default behavior\n                permalink: true,\n                permalinkClass: 'jp-InternalAnchorLink',\n                slugify: (title) => title.replace(/ /g, '-')\n            }\n        ];\n    }\n});\n","import { simpleMarkdownItPlugin } from '../utils';\nimport { kPackageName } from '../values';\n/**\n * Draw diagrams\n */\nexport const diagrams = simpleMarkdownItPlugin(kPackageName, {\n    id: 'markdown-it-diagrams',\n    title: 'Drawing Diagrams',\n    description: 'Draw diagrams with mermaid and railroad',\n    documentationUrls: {\n        Plugin: 'https://github.com/valeriangalliat/markdown-it-anchor'\n    },\n    examples: {\n        'Railroad': `\n\\`\\`\\`railroad\nDiagram(\n  Optional('+', 'skip'),\n  Choice(0,\n    NonTerminal('name-start char'),\n    NonTerminal('escape')),\n  ZeroOrMore(\n    Choice(0,\n      NonTerminal('name char'),\n      NonTerminal('escape'))))\n\\`\\`\\`\n`\n    },\n    plugin: async () => {\n        const diagramsPlugin = await import(\n        /* webpackChunkName: \"markdown-it-diagrams\" */ 'markdown-it-diagrams');\n        return [diagramsPlugin.default];\n    }\n});\n","import { simpleMarkdownItPlugin } from '../utils';\nimport { kPackageName } from '../values';\n/**\n * Provides docutils\n */\nexport const docutils = simpleMarkdownItPlugin(kPackageName, {\n    id: 'markdown-it-docutils',\n    title: 'MyST',\n    description: 'Use MyST syntax Markdown (limited) in JupyterLab',\n    documentationUrls: {\n        Plugin: 'https://github.com/executablebooks/markdown-it-docutils'\n    },\n    examples: {\n        'Directives and roles': `\nUnhandled role: {unknown}\\`content\\` in paragraph.\n\nRaw role: {raw}\\`content\\`\n\nUnhandled directive:\n\n\\`\\`\\`{unknown} argument\ncontent\n\\`\\`\\`\n\nErroneous directive:\n\n\\`\\`\\`{admonition}\n\\`\\`\\`\n\nAdmonition with title\n\n\\`\\`\\`{admonition} A **Title**\nSome *content*\n\\`\\`\\`\n\nNested admonitions:\n\n\\`\\`\\`\\`{note} This is a note\n\\`\\`\\`{warning} This is a nested warning\n\\`\\`\\`\n\\`\\`\\`\\`\n\nImages and figures:\n\n\\`\\`\\`{image} https://via.placeholder.com/150\n:align: center\n\\`\\`\\`\n\n\\`\\`\\`{figure} https://via.placeholder.com/150\n:align: center\n\nA **caption**\n\\`\\`\\`\n\nTables:\n\n\\`\\`\\`{list-table} Caption *text*\n:header-rows: 1\n\n- * Heading, Column 1\n  * Heading, Column 2\n- * Row, Column 1\n  * Row, Column 2\n\n    Second paragraph\n\\`\\`\\`\n\nHTML:\n\n* H{sub}\\`2\\`O\n* 4{sup}\\`th\\` of July\n* {abbr}\\`CSS (Cascading Style Sheets)\\`\n          \nMath:\n          \n\\`\\`\\`{math}\n:label: math_label\nw_{t+1} = (1 + r_{t+1}) s(w_t) + y_{t+1}    \n\\`\\`\\`\n`\n    },\n    plugin: async () => {\n        const docutilsPlugin = await import(\n        /* webpackChunkName: \"markdown-it-docutils\" */ 'markdown-it-docutils');\n        return [docutilsPlugin.default];\n    }\n});\n","import { simpleMarkdownItPlugin } from '../utils';\nimport { kPackageName } from '../values';\n/**\n * Provides footnotes\n */\nexport const footnote = simpleMarkdownItPlugin(kPackageName, {\n    id: 'markdown-it-footnote',\n    title: 'Footnotes',\n    description: 'Create links notes that appear after the current paragraph',\n    documentationUrls: {\n        Plugin: 'https://github.com/markdown-it/markdown-it-footnote'\n    },\n    examples: {\n        'Footnote': `\nHere is a footnote reference,[^1] and another.[^longnote]\n\n[^1]: Here is the footnote.\n\n[^longnote]: Here's one with multiple blocks.\n\n  Subsequent paragraphs are indented to show that they\nbelong to the previous footnote.\n`\n    },\n    plugin: async () => {\n        const footnotePlugin = await import(\n        /* webpackChunkName: \"markdown-it-footnote\" */ 'markdown-it-footnote');\n        return [footnotePlugin.default];\n    }\n});\n","import { anchor } from './anchor';\nimport { diagrams } from './diagrams';\nimport { docutils } from './docutils';\nimport { footnote } from './footnote';\nimport { task } from './tasklist';\nexport const plugins = [anchor, diagrams, docutils, footnote, task];\n","import { simpleMarkdownItPlugin } from '../utils';\nimport { kPackageName } from '../values';\n/**\n * Provides tasklist\n */\nexport const task = simpleMarkdownItPlugin(kPackageName, {\n    id: 'markdown-it-task-checkbox',\n    title: 'Tasklists',\n    description: 'Create GitHub-style tasklists',\n    documentationUrls: {\n        Plugin: 'https://github.com/linsir/markdown-it-task-checkbox'\n    },\n    examples: {\n        'Tasklist': `\n- [ ] Mercury\n- [x] Venus\n- [x] Earth (Orbit/Moon)\n- [x] Mars\n- [ ] Jupiter\n- [ ] Saturn\n- [ ] Uranus\n- [ ] Neptune\n- [ ] Comet Haley\n`\n    },\n    plugin: async () => {\n        const taskPlugin = await import(\n        /* webpackChunkName: \"markdown-it-task-checkbox\" */ 'markdown-it-task-checkbox');\n        return [taskPlugin.default];\n    }\n});\n","import { Signal } from '@lumino/signaling';\nimport { VDomModel, VDomRenderer } from '@jupyterlab/apputils';\nimport * as React from 'react';\nconst kClassSettings = 'jp-MarkdownItSettings';\nconst kClassDocs = 'jp-MarkdownItSettings-Docs';\nconst kClassExamples = 'jp-MarkdownItSettings-Examples';\nconst kClassDisabled = 'jp-mu-mod-disabled';\nconst kIdStem = 'id-jp-mu';\nconst kIdGlobal = `${kIdStem}-global`;\nconst kIdPlugin = `${kIdStem}-plugin`;\nexport class Model extends VDomModel {\n    constructor() {\n        super(...arguments);\n        this.advancedRequested = new Signal(this);\n        this._disabledPlugins = [];\n        this._enabled = true;\n        this._providers = [];\n    }\n    dispose() {\n        super.dispose();\n        if (this._manager) {\n            this._manager.settingsChanged.disconnect(this.onSettingsChanged, this);\n            this._manager = null;\n        }\n    }\n    get manager() {\n        return this._manager;\n    }\n    set manager(manager) {\n        this._manager = manager;\n        if (manager) {\n            manager.settingsChanged.connect(this.onSettingsChanged, this);\n            this.onSettingsChanged();\n        }\n    }\n    get disabledPlugins() {\n        return this._disabledPlugins;\n    }\n    get enabled() {\n        return this._enabled;\n    }\n    set enabled(enabled) {\n        this._manager.settings.set('enabled', enabled);\n    }\n    get providers() {\n        return this._providers;\n    }\n    setPluginEnabled(id, enabled) {\n        const disabledPlugins = this._disabledPlugins.slice();\n        const idx = disabledPlugins.indexOf(id);\n        if (enabled) {\n            disabledPlugins.splice(idx);\n        }\n        else {\n            disabledPlugins.push(id);\n        }\n        if (disabledPlugins.length) {\n            this.manager.settings.set('disabled-plugins', disabledPlugins);\n        }\n        else {\n            this.manager.settings.remove('disabled-plugins');\n        }\n    }\n    onSettingsChanged() {\n        const { composite } = this.manager.settings;\n        if (composite != null) {\n            this._disabledPlugins = (composite['disabled-plugins'] ||\n                []);\n            this._enabled = composite['enabled'];\n            this._providers = this.manager.pluginProviderIds.map(this.manager.getPluginProvider, this.manager);\n            this._providers.sort(this.sortByTitle);\n        }\n        this.stateChanged.emit(void 0);\n    }\n    sortByTitle(a, b) {\n        return a.title.localeCompare(b.title);\n    }\n}\nexport class MarkdownItSettings extends VDomRenderer {\n    constructor(model) {\n        super(model);\n        this.onPluginEnabledChanged = (evt) => {\n            const { value, checked } = evt.currentTarget;\n            this.model.setPluginEnabled(value, checked);\n        };\n        this.onEnabledChanged = (evt) => {\n            this.model.enabled = evt.currentTarget.checked;\n        };\n        this.onAdvancedClicked = () => {\n            this.model.advancedRequested.emit(void 0);\n        };\n        this.addClass(kClassSettings);\n        this.addClass('jp-RenderedHTMLCommon');\n    }\n    dispose() {\n        var _a;\n        (_a = this.model) === null || _a === void 0 ? void 0 : _a.dispose();\n        super.dispose();\n    }\n    /**\n     * Render the settings form\n     */\n    render() {\n        const m = this.model;\n        const manager = m === null || m === void 0 ? void 0 : m.manager;\n        const advancedLink = (React.createElement(\"a\", { href: \"#\", onClick: this.onAdvancedClicked }, \"Open in Advanced Settings...\"));\n        if (manager == null) {\n            return React.createElement(\"div\", null);\n        }\n        const { providers } = m;\n        return (React.createElement(\"div\", null,\n            React.createElement(\"header\", null,\n                React.createElement(\"ul\", null,\n                    React.createElement(\"li\", null,\n                        React.createElement(\"a\", { href: `#${kIdGlobal}` }, \"Global\")),\n                    React.createElement(\"li\", null,\n                        React.createElement(\"a\", { href: `#${kIdPlugin}` }, \"Markdown-it Plugins\"),\n                        React.createElement(\"ul\", null, providers.map(this.renderPluginNav, this))),\n                    React.createElement(\"li\", null, advancedLink))),\n            React.createElement(\"article\", null,\n                React.createElement(\"section\", { id: kIdGlobal },\n                    React.createElement(\"h3\", null, \"Global\"),\n                    React.createElement(\"label\", null,\n                        React.createElement(\"input\", { type: \"checkbox\", defaultChecked: m.enabled, onChange: this.onEnabledChanged }),\n                        \"Use \",\n                        React.createElement(\"code\", null, \"markdown-it\")),\n                    React.createElement(\"blockquote\", null,\n                        \"Enable to use the \",\n                        React.createElement(\"code\", null, \"markdown-it\"),\n                        \" Markdown renderer and extensions for any new renderers.\")),\n                React.createElement(\"h3\", { id: kIdPlugin }, \"Markdown-it Plugins\"),\n                React.createElement(\"blockquote\", null,\n                    \"Extensions can be individually enabled or disabled with the checkboxes below. See \",\n                    advancedLink,\n                    \" for more fine-grained control.\"),\n                providers.map(this.renderPluginProvider, this))));\n    }\n    /**\n     * Render a single plugin provider nav link\n     */\n    renderPluginNav(provider) {\n        const m = this.model;\n        const enabled = m.disabledPlugins.indexOf(provider.id) === -1;\n        const navClass = enabled && m.enabled ? '' : kClassDisabled;\n        return (React.createElement(\"li\", { key: provider.id, className: navClass },\n            React.createElement(\"a\", { href: `#${kIdPlugin}-${provider.id}` }, provider.title)));\n    }\n    /**\n     * Render a single plugin provider section\n     */\n    renderPluginProvider(provider) {\n        const m = this.model;\n        const enabled = m.disabledPlugins.indexOf(provider.id) === -1;\n        const sectionClass = enabled && m.enabled ? '' : kClassDisabled;\n        const docs = [];\n        const examples = [];\n        for (const label in provider.documentationUrls) {\n            docs.push(this.renderDoc(label, provider.documentationUrls[label]));\n        }\n        for (const label in provider.examples || {}) {\n            examples.push(this.renderExample(label, provider.examples[label]));\n        }\n        return (React.createElement(\"section\", { key: provider.id, id: `${kIdPlugin}-${provider.id}`, className: sectionClass },\n            React.createElement(\"div\", null,\n                React.createElement(\"h4\", { title: `plugin id: ${provider.id}` },\n                    React.createElement(\"label\", null,\n                        React.createElement(\"input\", { type: \"checkbox\", value: provider.id, defaultChecked: enabled, onChange: this.onPluginEnabledChanged }),\n                        provider.title)),\n                React.createElement(\"ul\", { className: kClassDocs }, docs)),\n            React.createElement(\"blockquote\", null, provider.description),\n            React.createElement(\"ul\", { className: kClassExamples }, examples)));\n    }\n    renderDoc(label, url) {\n        return (React.createElement(\"li\", { key: url },\n            React.createElement(\"a\", { href: url, target: \"_blank\", rel: \"noopener\" }, label)));\n    }\n    renderExample(label, code) {\n        return (React.createElement(\"div\", { key: label },\n            React.createElement(\"p\", null,\n                React.createElement(\"label\", null,\n                    React.createElement(\"em\", null, label))),\n            React.createElement(\"pre\", null,\n                React.createElement(\"code\", null, code))));\n    }\n}\n","import { IMarkdownManager } from './values';\n/**\n * Convenience method for building JupyterLab MarkdownIt plugins\n */\nexport function simpleMarkdownItPlugin(packageName, provider) {\n    return {\n        id: `${packageName}:${provider.id}`,\n        autoStart: true,\n        requires: [IMarkdownManager],\n        activate: (app, markdownIt) => {\n            markdownIt.addPluginProvider(provider);\n        }\n    };\n}\n","import { Token } from '@lumino/coreutils';\nimport { markdownIcon, LabIcon } from '@jupyterlab/ui-components';\nexport const kPackageName = 'divemarkdownit';\nexport const kCommandCategory = 'Markdown Extensions';\nexport const kMarkupIcon = new LabIcon({\n    name: `${kPackageName}:core`,\n    svgstr: markdownIcon.svgstr.replace('jp-icon-contrast0', 'jp-icon-contrast1')\n});\nexport const IMarkdownManager = new Token(kPackageName);\nexport var CommandID;\n(function (CommandID) {\n    CommandID.showSettings = 'markdown-it:show-settings';\n    CommandID.toggleRenderer = 'markdown-it:toggle-renderer';\n})(CommandID || (CommandID = {}));\n","import { RenderedHTMLCommon } from '@jupyterlab/rendermime';\nimport { removeMath, renderHTML, replaceMath } from '@jupyterlab/rendermime';\n/**\n * A mime renderer for displaying Markdown with embedded latex.\n */\nexport class RenderedMarkdown extends RenderedHTMLCommon {\n    constructor(options) {\n        super(options);\n        this.addClass('jp-RenderedMarkdown');\n    }\n    /**\n     * Render a mime model.\n     *\n     * @param model - The mime model to render.\n     *\n     * @returns A promise which resolves when rendering is complete.\n     */\n    async render(model) {\n        if (this.md == null) {\n            this.md = await RenderedMarkdown.markdownItManager.getMarkdownIt(this);\n        }\n        let markdown = String(model.data[this.mimeType]);\n        let text_and_math = removeMath(markdown);\n        let text = text_and_math['text'];\n        let html = this.md.render(text);\n        html = replaceMath(html, text_and_math['math']);\n        return await renderHTML({\n            host: this.node,\n            source: html,\n            trusted: model.trusted,\n            resolver: this.resolver,\n            sanitizer: this.sanitizer,\n            linkHandler: this.linkHandler,\n            shouldTypeset: this.isAttached,\n            latexTypesetter: this.latexTypesetter\n        });\n    }\n    /**\n     * A message handler invoked on an `'after-attach'` message.\n     */\n    onAfterAttach(msg) {\n        if (this.latexTypesetter) {\n            this.latexTypesetter.typeset(this.node);\n        }\n    }\n}\n"],"names":[],"sourceRoot":""}